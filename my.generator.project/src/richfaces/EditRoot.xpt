«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»


«DEFINE genEditView(boolean edit) FOR uml::Class»
	«clearCurrentEmbeddable()-»
	«setCurrentEditMode(edit)» 
	«IF edit»
		«EXPAND genEditFile»
	«ELSE»
		«EXPAND genViewFile»
	«ENDIF»
	«EXPAND genEditViewComponent(edit) FOR this»
«ENDDEFINE»

«DEFINE genEditFile FOR uml::Class»
«FILE getWebPath() +"/" + "edit" + name+ "." + getExtension()»
<ui:composition «EXPAND WebRoot::genIncludes-»
	template = "«getAdminTemplate()»" >	
	<ui:define name="content">
		«IF templatable && !isCurrentTemplateMode() »«EXPAND genTemplateChooser FOR this»«ENDIF»
		<h:form  enctype="multipart/form-data"> «REM»TODO : usemultipart «ENDREM»
		«IF isCurrentTemplateMode()»Template Name: <h:inputText value="#{«getAction()».templateName}" required="true" />«ENDIF»
		<ui:include src = "edit«name»Component.«getExtension()»" />
		«EXPAND genCancelSaveBtns(true) FOR this»
		</h:form>
	</ui:define> 
	
	«REM»comment
	«FOREACH getOutgoingAssociations() AS e»
	 <ui:include src="«e.type.getComponentFile("modalDlg")»"/> 
	«ENDFOREACH»
	«ENDREM»
</ui:composition>
«ENDFILE»

«ENDDEFINE»

«DEFINE genViewFile FOR uml::Class»
	«FILE getWebPath() +"/" + "view" + name + "." + getExtension()»
<ui:composition «EXPAND WebRoot::genIncludes-» template = "«getAdminTemplate()»" >	
	<ui:define name="content">
		<h:form>
			<rich:tabPanel switchType="ajax">
				<rich:tab label="«name»">
					<ui:include src = "«getComponentViewFile("view")»" />
					«EXPAND genCancelSaveBtns(false) FOR this»
				</rich:tab>
			«FOREACH getOutgoingAssociations() AS a ITERATOR iter»
				<rich:tab label="«a.name.toFirstUpper()»">
					<ui:include src = "«a.type.getComponentViewFile("view")»" >
						«REM»comment<ui:param name="entityId" value="«getRandomNumber()»" />«ENDREM»
						<ui:param name="entityId" value="«iter.counter1»" />
						<ui:param name="«a.type.name.toFirstLower()»Id" value="#{«getAction()».instance.«a.name».id}" />
					</ui:include>
				</rich:tab>
			«ENDFOREACH»	
			
			</rich:tabPanel>
		</h:form>
		<br/>
			
			<rich:tabPanel>
			«FOREACH getNonComposedManyAssociations() AS a»
			<rich:tab label="«a.name.toFirstUpper()»" icon="/images/icons/bricks.png">
				<ui:include src = "«a.type.getComponentViewFile("list")»" >
					<ui:param name="records" value="#{«a.type.asVar()»List.get«a.name.toFirstUpper()»By«a.opposite.name.toFirstUpper()»(«getAction()».instance)}" />
         		</ui:include>
         		<a:form> 
		      		<s:button value="Create New" view="«a.type.getViewFile("edit")»" > 
		      			<f:param name="«name.toFirstLower()»Id" value="#{«getAction()».instance.id}" />
		      		    <f:param name="«a.type.name.toFirstLower()»Id" value="0"/> 
		      		</s:button>
		      		  <a:commandButton oncomplete="Richfaces.showModalPanel('«a.type.name»ModalPanel',{});" value="Quick Create">
			            <a:actionparam name="«a.type.name.toFirstLower()»Id" assignTo="#{«a.type.name.toFirstLower()»Action.«a.type.name.toFirstLower()»Id}" value="0"  />
			         	<a:actionparam name="«name.toFirstLower()»Id" assignTo="#{«a.type.name.toFirstLower()»Action.«a.opposite.name»Id}" 
			         		value="#{«name.toFirstLower()»Action.instance.id}"  />
			         </a:commandButton>
		    	</a:form>
		    	<ui:include src="«a.type.getComponentViewFile("modalDlg")»" /> 
			</rich:tab>
			«ENDFOREACH»
			</rich:tabPanel>
		<br/>
		
		<rich:tabPanel>
			<rich:tab label="Notes">
				<wc:comments backingAction="#{«getAction()»}"/>
			</rich:tab>
			«IF getAuditable()-»
			<rich:tab label="Audit">
				<ui:include
					src="«getComponentViewFile("auditList")»" />
			</rich:tab>
			«ENDIF»
		</rich:tabPanel>
		
	</ui:define> 
</ui:composition>
	«ENDFILE»
«ENDDEFINE»


«DEFINE genEditViewComponent(boolean edit) FOR uml::Class»
	«FILE getWebPath() +"/" + (edit?"edit":"view") + name+ "Component." + getExtension()»
	<ui:composition «EXPAND WebRoot::genIncludes-» >	
	<h:panelGroup   >
		<s:validateAll>
		«setAsCurrentEntity(this)-»
		<h:panelGrid columns="«edit?"3":"6"»" styleClass="«(edit)?"edit":"view"»Info" columnClasses="leftCol, rightCol"  onload="#{«getAction()».load(«asVar()»Id )  }">
		<f:facet name="header">
			<h:outputText value="«name» " />
		</f:facet>
		«IF !edit»
			<h:outputText value="#{msg.id}" />
			<h:outputText  value="#{«asVar()»Action.«asVar()».id}" />
		«ENDIF»
		«IF !isCurrentEditMode() && fieldsFromSuperClass != null» «EXPAND genProperty FOREACH getStringsAsList(fieldsFromSuperClass)» «ENDIF»
		«EXPAND genAttribAsOutput FOR this-»
		</h:panelGrid>
		«EXPAND genTable FOR this-»
		«EXPAND genManyToManyShuttle FOR this-»
		</s:validateAll>
	
	</h:panelGroup>
	</ui:composition>
	«ENDFILE»
«ENDDEFINE»




«DEFINE genCancelSaveBtns(boolean edit) FOR uml::Class»
	<div class="buttonBox">
		«IF !edit»
		<h:commandButton value="Edit"  rendered="#{s:hasPermission('«asVar()»', 'edit', «getAction()».instance)}" action="edit" >
		</h:commandButton> 
		<h:outputText value=" " />
		<h:commandButton value="Back To Listing" action="#{«getAction()».cancel}" >
			<s:conversationPropagation type="end" />
		</h:commandButton>  
		«ELSE»
		<h:commandButton value="Save" action="#{«getAction()».save«isCurrentTemplateMode()?"Template":"" »}" >
		</h:commandButton>  
		<h:outputText value=" " /> 
		<h:commandButton value="Cancel" immediate="true" action="#{«getAction()».cancel}" >
		</h:commandButton>  
		«ENDIF»
	</div>
«ENDDEFINE»

«DEFINE genAttribAsOutput FOR uml::Class-»
	«FOREACH allParents() AS e-»
	 «EXPAND genAttributeAssoc FOREACH e.getAllAttributes().select(a| !a.isMultivalued() && a.association != null ) -»
	«ENDFOREACH»
	«EXPAND genAttributeAssoc FOREACH getAllAttributes().select(a| !a.isMultivalued() && a.association != null  ) -»

	«FOREACH allParents() AS e-»
	 «EXPAND genLabelAndControl FOREACH e.getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
	«ENDFOREACH»
	«EXPAND genLabelAndControl FOREACH getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
«ENDDEFINE»

«REM»For multivalued attributes e.g. an order's order items«ENDREM»
«DEFINE genTable FOR uml::Class»
	«FOREACH allParents() AS e-»
		«EXPAND gentEditableTable FOREACH e.getComposed() -»
	«ENDFOREACH»
	«EXPAND gentEditableTable FOREACH getComposed() -»
«ENDDEFINE»


«DEFINE genManyToManyShuttle FOR uml::Class»
	«FOREACH allParents() AS e-»
		«EXPAND genEditManyToManyShuttle FOREACH e.getLeadingManyToMany() -»
	«ENDFOREACH»
	«EXPAND genEditManyToManyShuttle FOREACH getLeadingManyToMany() -»
«ENDDEFINE»

«DEFINE genEditManyToManyShuttle FOR uml::Property»
	«IF isCurrentEditMode()»
	<rich:simpleTogglePanel label="«msgBundleKey()»" switchType="client"  >
		<rich:listShuttle sourceValue="#{«class.getAction()».listAvailable«name.toFirstUpper()»}" 
			targetValue="#{«class.getAction()».list«name.toFirstUpper()»}" var="item" >
	        <s:convertEntity />
	        <rich:column> #{item.displayName} </rich:column>
	     </rich:listShuttle>
    </rich:simpleTogglePanel>
	«ELSE»
	<rich:simpleTogglePanel label="«msgBundleKey()»" switchType="client"  >
        <rich:dataTable value="#{«class.getAction()».list«name.toFirstUpper()»}" var="item" >
        	<rich:column> #{item.displayName} </rich:column>
     	</rich:dataTable>
     </rich:simpleTogglePanel>
	«ENDIF»
«ENDDEFINE»




«DEFINE genAttributeAssoc FOR uml::Property -»
	«IF opposite.type.name != getCurrentEntity().name || !isCurrentMultiMode() »
		«IF type.isEmbeddable() || isContainedAssoc()  -»
			«setCurrentEmbeddable()»
			«EXPAND genAttribAsOutput FOR this.type-»
			«clearCurrentEmbeddable()-»
		«ELSE»
			«clearCurrentEmbeddable()»
			«EXPAND genLabelAndControl FOR this-»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE genLabelAndControl FOR uml::Property»
	«IF isCurrentEditMode()»
		«EXPAND genLabelAndInput FOR this-»
	«ELSE»
		«EXPAND genLabelAndOutput FOR this-»
	«ENDIF»
«ENDDEFINE»

«DEFINE genLabelAndInput FOR uml::Property-»
	«IF !isDerived() && !type.isEmbeddable() && !systemModify() »
		«getOutputMessage()»
		«IF association != null-»
			«EXPAND genAssociation-»
		«ELSE»
			«EXPAND genPropertyEntry(type) FOR this-»
		«ENDIF»
		«getErrorMessageHolder()-»
		«isCurrentMultiMode()?"</h:column>":""»
	«ENDIF»
«ENDDEFINE»

«DEFINE genLabelAndOutput FOR uml::Property-»
	«IF !isSecret()  »
		«getOutputMessage()-»
		«IF association != null»
			«EXPAND genAssociation-»
		«ELSE»
			«EXPAND genPropertyEntry(type) FOR this-»
		«ENDIF»
		«getErrorMessageHolder()-»
		«isCurrentMultiMode()?"</h:column>":""»
	«ENDIF»
«ENDDEFINE»


«DEFINE genAssociation FOR uml::Property -»
	«IF !isCurrentEditMode()-»
		«EXPAND genAssocLink FOR this»
	«ELSE»
		«EXPAND genAssociationEdit FOR this»
	«ENDIF»
«ENDDEFINE»


«DEFINE genAssocLink FOR uml::Property»
	<s:link «getEscape()»  value="#{«getActionForMode()»«genPropertyLabel()».displayName}"  view="«type.getViewFile("view")»" propagation="none">
			<f:param name="«name»Id" value="#{«getActionForMode()»«genPropertyLabel()».id}" />
			<f:param name="from" value="#{request.servletPath}" />
			«IF type.popupInfo != null»
			 <rich:toolTip>
	            <span>
	              #{«getActionForMode()»«genPropertyLabel()».popupInfo} 
	            </span>
	        </rich:toolTip>
	        «ENDIF»
	</s:link>
«ENDDEFINE»

«DEFINE genAssociationEdit FOR uml::Property»
	«IF (associationEnd.isColumn() && includeInAssociation) »
		«type.setCurrentEmbeddable()» 
		«EXPAND genLabelAndControl FOR this.type-»
	«ELSE»
		«IF (isColumn() && autocomplete == true) » 
			«EXPAND genAutoCompleteAssoc FOR this»
		«ELSE»
			«EXPAND genDropDown FOR this»
		«ENDIF»
	«REM»comment
	<a:commandButton oncomplete="Richfaces.showModalPanel('«type.name»ModalPanel',{});" value="Create" /> 
	<a:commandButton oncomplete="Richfaces.showModalPanel('«type.name»SelectModalPanel',{});" value="Choose" />
	«ENDREM» 
	«ENDIF»	
«ENDDEFINE»

«DEFINE genAutoCompleteAssoc FOR uml::Property»
	<h:panelGroup>
	 <a:region>
	<h:inputText value="#{«getActionForMode()»«genPropertyLabel()-».displayName}" label="«msgBundleKey()»"  
		id="«getId()»" required="«!getAssocOptional()»" />
	«EXPAND genSuggestionBox FOR this»
	 </a:region>
	</h:panelGroup>
«ENDDEFINE»

«DEFINE genSuggestionBox FOR uml::Property»
	<rich:suggestionbox  for="«getId()»"  rules="all" suggestionAction="#{«type.asVar()»List.autocompletedb}"  ajaxSingle="true"
		  var="_result" fetchValue="#{_result.displayName}" minChars="2" nothingLabel="No Results found" zindex="99999">
		«IF type.autoCompleteColumns == null»
			<h:column>
				<h:outputText value="#{_result.displayName}" />
			</h:column>
		«ELSE»
		«FOREACH type.autoCompleteColumns.getAsList() AS e-»
			<h:column>
				<h:outputText value="#{_result.«e»}" />
			</h:column>
		«ENDFOREACH»
		«ENDIF»
						
		<a:support event="onselect">
			<f:setPropertyActionListener value="#{_result}"
				target="#{«getActionForMode()»«genPropertyLabel()-»}" />
		</a:support>
	</rich:suggestionbox>
«ENDDEFINE»

«DEFINE genDropDown FOR uml::Property»
	<h:selectOneMenu id="«getId()»"   label="«msgBundleKey()»" value="#{«getActionForMode()»«genPropertyLabel()-»}" 
		required="«!getAssocOptional() && !isCurrentTemplateMode()»">
		«IF isColumn() && this.controls != null » <a:support event="onchange" reRender="«controls»" ajaxSingle="true" /> «ENDIF»
		<s:selectItems value="#{«isColumn() && this.assocList != null ? assocList : type.asVar() + "List"»}" var="itemIter"
			label="#{itemIter.displayName}"
			noSelectionLabel="Please Select..." />
		<s:convertEntity />
	</h:selectOneMenu>
«ENDDEFINE»



«DEFINE genPropertyEntry(uml::PrimitiveType cls) FOR uml::Property-»
«IF isFile()-» «EXPAND genFilePropertyEntry»
«ELSE-»
<«getTextControl()»  id="«getId()»#{entityId}" «isCurrentEditMode()? " label=\"" + msgBundleKey() + "\"  required=\"" + getRequired() +"\"":""»  value="#{«getActionForMode()»«genPropertyLabel()»}" />
«ENDIF»
«ENDDEFINE»



«DEFINE getFileView FOR uml::Property»
«LET isCurrentMultiMode()?"_" + getCurrentEntity().asVar(): getFieldNameWithAction() AS currentFile»
	<c:choose>
		<c:when test="${«currentFile».contentType.startsWith('image')}">
			<s:graphicImage value="#{«currentFile».data}" />
		</c:when>
		<c:otherwise>
			<s:link value="#{«currentFile».name}"  action="#{«class.getAction()».downloadFile(null)}" propagation="none" >
				<f:param name="currentEntityId" value="#{«class.getAction()».instance.id}" />
			</s:link>
		</c:otherwise>
	</c:choose>
«ENDLET»
«ENDDEFINE»


«DEFINE genFilePropertyEntry FOR uml::Property-»
	«LET "_" + getCurrentEntity().asVar() AS currentFile»
	«IF isCurrentEditMode() »  
		«IF isCurrentMultiMode()»
		<s:div rendered="#{«currentFile».id > 0 }">
			«EXPAND getFileView »			
		</s:div>
		<s:div rendered="#{«currentFile».id == null }">
			<s:fileUpload
				contentType="#{«currentFile».contentType}"
				data="#{«currentFile».data}"
				fileName="#{«currentFile».name}" />
		</s:div>
		«ELSE»
		<s:div rendered="#{«getActionForMode()»«class.asVar()-».id != 0 }">
			«EXPAND getFileView»			
		</s:div>
		<s:div rendered="#{«getActionForMode()»«class.asVar()-».id == null }">
			«getTextForImgFile()» 
		</s:div>
		«ENDIF»
	«ELSE» 
		«EXPAND getFileView » 
	«ENDIF»
	«ENDLET»
«ENDDEFINE»


«DEFINE genPropertyEntry(uml::Enumeration enm) FOR uml::Property-»
	«IF !isCurrentEditMode() -»
	<«getTextControl()»  value="#{«getActionForMode()»«genPropertyLabel()»}" />
	«ELSE»
	<h:selectOneMenu id="«getId()»" value="#{«getActionForMode()»«genPropertyLabel()»}" required="«getAssocOptional() && !isCurrentTemplateMode()»" 
	  label="«msgBundleKey()»">
		<f:selectItem itemLabel="Please Select..." itemValue="" />
		«FOREACH  enm.ownedLiteral AS e-»
		<f:selectItem itemValue="«e.name»"  itemLabel="«e.name.toLowerCase().getVariableNameForDisplay()-»" />
		«ENDFOREACH»
	</h:selectOneMenu>
	«ENDIF»
«ENDDEFINE»



«DEFINE gentEditableTable FOR uml::Property-»
	«setCurrentMultiMode(true)-»
	«IF isCurrentEditMode()-» «EXPAND genNewButton FOR this» «ENDIF»
	
	<rich:dataTable id="«name»" var="_«type.asVar()»" 
		«IF !isCurrentEditMode()» rendered="#{not empty «class.getAction()».list«name.toFirstUpper()»}" «ENDIF»
					value="#{«class.getAction()».list«name.toFirstUpper()»}" 
				rowKeyVar="rowIndex"
				rowClasses="odd, even" styleClass="dataTable" rules="all">
		«setAsCurrentEntity(type)»
		«EXPAND genAttribAsOutput FOR type-»
		«IF isCurrentEditMode() -»
		«EXPAND genNew -»
		«EXPAND genDelete FOR this -»
		«ENDIF»	
	</rich:dataTable>
	«setCurrentMultiMode(false)-»
«ENDDEFINE»

«DEFINE genDelete FOR uml::Property»
	<h:column>
		<a:commandButton value="Delete" immediate="true" action="#{«class.getAction()».delete«name.toFirstUpper()»(rowIndex)}"  
			reRender="«name»"
			>
			<s:conversationId/>
		</a:commandButton>
	</h:column>
«ENDDEFINE»

«DEFINE genNew FOR uml::Property»
	<h:column>
		«EXPAND genNewButton FOR this»
	</h:column>
«ENDDEFINE»

«DEFINE genNewButton FOR uml::Property»
	<a:commandButton  value="New «name.toFirstUpper().getSingular()»" action="#{«class.getAction()».add«name.toFirstUpper()»}"  
		reRender="«name»" >
		<s:conversationId/>
	</a:commandButton>
«ENDDEFINE»

«DEFINE genProperty FOR String-»
	<h:outputText value="«msgBundleKey()-»" />
	<h:outputText value="#{«getCurrentEntity().asVar()».«this»«this == "createdByUser"?".displayName":""»}" />
«ENDDEFINE»


«DEFINE genTemplateChooser FOR uml::Class»
<h:form>
	<h:outputText value="Template:"/>  
        <h:selectOneMenu id="template" label="Template" value="#{«getAction()».entityTemplate}" required="false"> 
          <s:selectItems value="#{prescriptionAction.templateList}" var="itemIter" label="#{itemIter.displayName}" 
          	noSelectionLabel="Select Template"/>  
          <s:convertEntity/> 
        </h:selectOneMenu>  
        
       <h:commandButton value="Create From Template" action="#{«getAction()».loadFromTemplate}" />
       <h:message styleClass="error errors" for="template"/>
</h:form>
«ENDDEFINE»