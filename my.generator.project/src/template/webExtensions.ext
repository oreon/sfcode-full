//import metamodel;
import uml;
import java;
import java::util;
import wcprofile;

extension org::openarchitectureware::uml2::profile::profiling;
extension template::GeneratorExtensions;
extension template::associationExtensions;


String getAction(Class cls):
cls.asVar() + "Action";

String getList(Class cls):
cls.asVar() + "List";

String getActionFqn(Class type):
type.getWebPackageName() + "." + type.name + "Action" ;

String getListFqn(Class type):
type.getWebPackageName() + "." + type.name + "ListQuery" ;


boolean isEnum(Type type):
type.getAppliedStereotype("uml::Enumeration") != null;

boolean isString(Property prop):
prop.type.name == "String";


String msgBundleKey(Property attr):
"#{msg." + attr.class.asVar() + "_" + attr.name + "}";

String msgBundleKey(String attr):
"#{msg." + attr  + "}";


//get interfaces
getAttribs(Class cls):
JAVA org.wc.generatorutil.ClassUtil.getInts(org.eclipse.uml2.uml.Class);

setAsCurrentEntity(Class cls):
JAVA org.wc.generatorutil.ClassUtil.setCurrentEntity(org.eclipse.uml2.uml.Class);

Class getCurrentEntity():
JAVA org.wc.generatorutil.ClassUtil.getCurrentEntity();

setCurrentEmbeddable(Property cls):
JAVA org.wc.generatorutil.ClassUtil.setCurrentEmbeddable(org.eclipse.uml2.uml.Property);

Class getCurrentEmbeddable():
JAVA org.wc.generatorutil.ClassUtil.getCurrentEmbeddable();


clearCurrentEmbeddable():
JAVA org.wc.generatorutil.ClassUtil.clearCurrentEmbeddable();


setCurrentMultiMode(boolean val):
JAVA org.wc.generatorutil.ClassUtil.setCurrentMultiMode(java.lang.Boolean);

boolean isCurrentMultiMode():
JAVA org.wc.generatorutil.ClassUtil.isCurrentMultiMode();

setCurrentEditMode(boolean val):
JAVA org.wc.generatorutil.ClassUtil.setCurrentEditMode(java.lang.Boolean);

boolean isCurrentEditMode():
JAVA org.wc.generatorutil.ClassUtil.isCurrentEditMode();





String getOutputMessage(Property prop):
isCurrentMultiMode()  ? getColumnBegin(prop):getLabelText(prop);

String getColumnBegin(Property prop):
"<h:column style=\"text-align:" + prop.getAlign() + "\"><f:facet name=\"header\">" + prop.getLabelText() + "</f:facet>";

//types other than text e.g. integer, double should be right aligned
getAlign(Property prop):
prop.isString()?"left":"right";

//Used for labeling in the UI e.g First Name for field firstName
String getLabelText(Property prop):
"<h:outputText value=\"" + prop.msgBundleKey()  +  " " + prop.getRequiredStar() + " \"/>";

getRequiredStar(Property prop):
isCurrentEditMode() && prop.getRequired() == "true"?"*":"";

String getTextControl(Property prop):
isCurrentEditMode() ? getInputControl(prop):getOutputControl(prop) + prop.getEscape();


//In case of lob properties e.g. description we need to escape the html 
String getEscape(Property prop):
prop.isType("largeText")?" escape=\"false\" ":" ";

String getInputControl(Property prop):
if(prop.type.name == "largeText")  
	then getRichTextEditor()
else if ( prop.isType("boolean") || prop.isType("Boolean") )
	then prop.getJSFPrefix() + ":selectBooleanCheckbox"
else if (prop.isType("Date")) then
	"rich:calendar"
else if (prop.isColumn() && prop.secret ) then
	prop.getJSFPrefix() + ":inputSecret redisplay=\"true\" "
else if (prop.isColumn() && prop.textSize > 0 ) then
	prop.getJSFPrefix() + ":inputText size=\"" + prop.textSize +"\""
else	
	prop.getJSFPrefix() + ":inputText";
	
	
String getOutputControl(Property prop):
if(prop.type.name == "largeText")  
	then "s:formattedText"
else	
	prop.getJSFPrefix() + ":outputText";	


String getRichTextEditor():
if (getCurrentCartridge() == "RICH" )then
	"rich:editor useSeamText=\"true\" "
else  
   "inputRichText toolbar=\"Basic\" saveOnSubmit=\"true\"";
	
	
String getInputControlSearch(Property prop):
if (prop.type.name == "boolean" || prop.type.name == "Boolean" )
	then prop.getJSFPrefix() + ":" + "selectBooleanCheckbox"
else if (prop.isType("Date")) then
	prop.getJSFPrefix() + ":" + "calendar"
else
	prop.getJSFPrefix() + ":" + "inputText";
	
//the jsf prefix for the library we are using e.g. for richfaces it'd be rich
String getJSFPrefix(Property prop):
(isCurrentEditMode() && prop.isType("Date"))?"wc":getCurrentJSFPrefix();

String getCurrentJSFPrefix():
getCurrentCartridge() == "RICH" ? "h" : "ice";

String getFieldNameWithAction(Property prop):
prop.class.getAction() + "." + prop.class.asVar() + "." + prop.name;

getTextForImgFile(Property prop): 
"<s:fileUpload data=\"#{" + prop.getFieldNameWithAction() + ".data}\" fileName=\"#{" + prop.getFieldNameWithAction() + ".name}\"  contentType=\"#{" + 
	prop.getFieldNameWithAction() + ".contentType}\" />";




String getWebPath(Class cls):
 getEntitiesRoot() + cls.package.name + "/" + cls.asVar();

String getEntitiesRoot():
getAdminRoot() +  "entities/";

String getTasksRoot():
getAdminRoot() + "tasks/";
 
String getReportsRoot():
getAdminRoot() + "reports/";
 

String getAdminRoot():
"../webapp/admin/";


//returns full path of a state
String getStateWebPath(State st):
"../webapp/" + st.containingStateMachine().name + "/" + st.name + "." + getExtension();

getTaskFromWebPath(ActivityNode node):
"../webapp/admin/tasks/taskForms/" + node.activity.name + "/" + node.name + "TaskForm." + getExtension();

String getStateWebName(State st):
st.containingStateMachine().name + "/" + st.name + "." + getExtension();


String getExtension():
if( getCurrentCartridge() == "RICH" ) then
	 "xhtml"
else if ( getCurrentCartridge() == "ICE") then
	"jspx"
else if ( getCurrentCartridge() == "DOT_NET") then
 	"aspx"
else
	"XXX";

String getAdminTemplate():
"/admin/template." + getExtension();

String getTemplateName(ViewState vs):
if (vs.template != null ) then 
	vs.template
else if(vs.containingStateMachine().template != null) then 
	vs.containingStateMachine().template
else 
  "/webtemplate/template." + getExtension();

//String getId(Property prop):
//(prop.association != null ? prop.name.toFirstLower():"") + prop.class.name.toFirstLower() + "_" + prop.name;

String getId(Property prop):
prop.getEmbeddableClassNameSuffix("_") + prop.name;


String getActionForMode():
!isCurrentMultiMode()?getCurrentEntity().asVar() + "Action.": "_"; 



String getErrorMessageHolder(Property prop):
isCurrentEditMode()?getErrorMessage(prop):"";

String getErrorMessage(Property prop):
"<h:message styleClass=\"error errors\" for=\"" + prop.getId() + "\" />";


String getViewFile(Class e,String mode):
getViewFileName(e, mode) + "." + getExtension();

String getComponentViewFile(Class e,String mode):
getViewFileName(e, mode) + "Component" +  "." + getExtension();

//returns name without extension 
String getViewFileName(Class e,String mode):
"/admin/entities/" + e.package.name.toFirstLower() + "/" + e.asVar() + "/" + mode + e.name;



String getRequired(Property prop):
prop.type.name == "nameType" || prop.type.name == "uniqueNameType"?"true":"false";

String getRequired(Column prop):
prop.notNull || prop.type.name == "nameType" || prop.type.name == "uniqueNameType"?"true":"false";

getAccess(Column prop):
prop.access;

getAccess(Property prop):
null;

genPropertyLabel(Property prop):
getCurrentEntity().asVar() + "." + (prop.getEmbeddableClassName()) + prop.name.toFirstLower();

//audit log 
genAuditLogPropertyLabel(Property prop):
"entity." + (prop.getEmbeddableClassName()) + prop.name.toFirstLower();

//check if the given property is contained in the class denoted by getcrruententity
getEmbeddableClassName(Property prop):
getEmbeddableClassNameSuffix( prop, ".");

//prop.class.isEmbeddable() || prop.class.isContainedAssoc() ?getCurrentEmbeddable().asVar() + ".":"";

getEmbeddableClassNameSuffix(Property prop, String suffix):
getCurrentEmbeddable() != null? getCurrentEmbeddable().name + suffix:"" ;


getWebPackagePath(Class cls, String ext):
getTopLevelPackage().packagePath() + "/web/action/"  + cls.package.name + "/" + cls.name + ext + ".java";

getWebPackageName(Class cls):
getTopLevelPackage() + ".web.action." + cls.package.name;
 

