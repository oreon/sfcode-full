//import metamodel;
import uml;
import java;
import java::util;
import wcprofile;

extension org::openarchitectureware::uml2::profile::profiling;
extension template::GeneratorExtensions;


String getAction(Class cls):
cls.asVar() + "Action";


boolean isEnum(Type type):
type.getAppliedStereotype("uml::Enumeration") != null;

boolean isString(Property prop):
prop.type.name == "String";


String msgBundleKey(Property attr):
"#{msg." + attr.class.asVar() + "_" + attr.name + "}";

//get interfaces
getAttribs(Class cls):
JAVA org.wc.generatorutil.ClassUtil.getInts(org.eclipse.uml2.uml.Class);

setAsCurrentEntity(Class cls):
JAVA org.wc.generatorutil.ClassUtil.setCurrentEntity(org.eclipse.uml2.uml.Class);

Class getCurrentEntity():
JAVA org.wc.generatorutil.ClassUtil.getCurrentEntity();

setCurrentEmbeddable(Class cls):
JAVA org.wc.generatorutil.ClassUtil.setCurrentEmbeddable(org.eclipse.uml2.uml.Class);

setCurrentMultiMode(boolean val):
JAVA org.wc.generatorutil.ClassUtil.setCurrentMultiMode(java.lang.Boolean);

boolean isCurrentMultiMode():
JAVA org.wc.generatorutil.ClassUtil.isCurrentMultiMode();

setCurrentEditMode(boolean val):
JAVA org.wc.generatorutil.ClassUtil.setCurrentEditMode(java.lang.Boolean);

boolean isCurrentEditMode():
JAVA org.wc.generatorutil.ClassUtil.isCurrentEditMode();


Class getCurrentEmbeddable():
JAVA org.wc.generatorutil.ClassUtil.getCurrentEmbeddable();

String getVariableNameForDisplay(String arg):
JAVA org.wc.generatorutil.ClassUtil.getViewLabelFromVariable(java.lang.String);

String getOutputMessage(Property prop):
isCurrentMultiMode()  ? getColumnBegin(prop):getLabelText(prop);

String getColumnBegin(Property prop):
"<h:column style=\"text-align:" + prop.getAlign() + "\"><f:facet name=\"header\">" + prop.getLabelText() + "</f:facet>";

//types other than text e.g. integer, double should be right aligned
getAlign(Property prop):
prop.isString()?"left":"right";

//Used for labeling in the UI e.g First Name for field firstName
String getLabelText(Property prop):
"<h:outputText value=\"" + prop.msgBundleKey()  + "\"/>";

String getTextControl(Property prop):
prop.getJSFPrefix() + ":" + (isCurrentEditMode()?getInputControl(prop):"outputText " + prop.getEscape());

//In case of lob properties e.g. description we need to escape the html 
String getEscape(Property prop):
prop.isType("largeText")?"escape=\"false\" ":" ";

String getInputControl(Property prop):
if(prop.type.name == "largeText")  
	then "inputRichText toolbar=\"Basic\" saveOnSubmit=\"true\""
else if ( prop.isType("boolean") || prop.isType("Boolean") )
	then "selectBooleanCheckbox"
else if (prop.isType("Date")) then
	"calendar"
else if (prop.isColumn() && prop.secret ) then
	"inputSecret redisplay=\"true\" "
else if (prop.isColumn() && prop.textSize > 0 ) then
	"inputText size=\"" + prop.textSize +"\""
else	
	"inputText";
	
String getInputControlSearch(Property prop):
if (prop.type.name == "boolean" || prop.type.name == "Boolean" )
	then prop.getJSFPrefix() + ":" + "selectBooleanCheckbox"
else if (prop.isType("Date")) then
	prop.getJSFPrefix() + ":" + "calendar"
else
	prop.getJSFPrefix() + ":" + "inputText";
	
//the jsf prefix for the library we are using e.g. for richfaces it'd be rich
String getJSFPrefix(Property prop):
(isCurrentEditMode() && prop.isType("Date"))?"wc":"ice";

getTextForImgFile(Property prop):
isCurrentEditMode()?"<s:fileUpload data=\"#{" + prop.class.asVar() + "." + prop.name + "}\"/>":"<h:graphicImage />";

String getWebPath(Class cls):
 getEntitiesRoot() + cls.package.name + "/" + cls.asVar();

String getEntitiesRoot():
"../webapp/admin/entities/";

String getExtension():
"jspx";

String getTemplate():
"/admin/template.jspx";

String getId(Property prop):
prop.class.name + "_" + prop.name;

String getErrorMessageHolder(Property prop):
isCurrentEditMode()?"<h:message styleClass=\"error errors\" for=\"" + prop.getId() + "\" />":"";

String getViewFile(Class e,String mode):
"/admin/entities/" + e.package.name.toFirstLower() + "/" + e.asVar() + "/" + mode + e.name + "." + getExtension();


String getRequired(Property property):
"false";

String getRequired(Column prop):
prop.notNull?"true":"false";

getAccess(Column prop):
prop.access;

getAccess(Property prop):
null;
