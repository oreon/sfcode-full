«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»

«DEFINE Root FOR uml::Model»
	«REM» Massage the model «ENDREM»
	«EXPAND setDefaultNamesForAssocs FOREACH allOwnedElements().typeSelect(uml::Property) »
	«EXPAND applyEntityStereotype FOREACH allOwnedElements().typeSelect(wcprofile::EntitiesPackage) »
	«EXPAND PackageRoot FOREACH allOwnedElements().typeSelect(uml::Package)»
«ENDDEFINE»

«DEFINE PackageRoot FOR uml::Package»
	«EXPAND ClassRoot FOREACH allOwnedElements().typeSelect(uml::Class)»
	«EXPAND ClassRoot FOREACH allOwnedElements().typeSelect(uml::Interface)»
	«EXPAND EnumGen FOREACH allOwnedElements().typeSelect(uml::Enumeration)»
«ENDDEFINE»



«DEFINE ClassRoot FOR uml::Interface»
	«FILE packagePath() +"/" +name+".java"»
	package « packageName() »;
	
	public interface «name» «parents().size > 0 ?" extends " + parents().get(0).name:""»{
	
	}
	«ENDFILE»
«ENDDEFINE»


«DEFINE genClassBody FOR uml::Class»
	public class «name» «parents().size > 0 ?" extends " + parents().get(0).name:""» «getInterfaces()»{
	
	«EXPAND genDecl FOREACH getAllAttributes() »
	«EXPAND genGetterSetter FOREACH getAllAttributes() »
	
	}
«ENDDEFINE»


«DEFINE ClassRoot FOR uml::Class»
	«FILE packagePath() +"/" +name+".java"»
		package « packageName() »;
		
		«EXPAND genImports FOR this»
		
		«EXPAND genClassBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE ClassRoot FOR wcprofile::Entity»
	«FILE packagePath() +"/"  +name+".java"»
	package «packageName()»;
	
	«EXPAND genImports FOR this»
	//@Entity
	«REM» «tableName != null ?("(table=" + tableName + ")"):""») «ENDREM»
	«EXPAND genClassBody FOR this»
	«ENDFILE»
«ENDDEFINE»


«DEFINE genImports FOR uml::Class»
	import java.util.Set;
	import java.util.HashSet;
	import java.util.Date;
«ENDDEFINE»

«DEFINE gen FOR uml::Operation»
	«name»;
«ENDDEFINE»

«DEFINE gen FOR uml::Generalization»
«ENDDEFINE»

«DEFINE gen FOR wcprofile::NamedQuery»
	@nq(value=«name»)
	«visibility» «type.name» «name» (){ }
«ENDDEFINE»


«DEFINE genDecl FOR uml::Property»
	«IF isMultivalued()»
		private Set<«type.fqnForPackage(this.class)»> «name»;
	«ELSE»
		private «type.fqnForPackage(this.class)» «name»;
	«ENDIF»
«ENDDEFINE»



«DEFINE genGetterSetter FOR uml::Property»
	«IF isMultivalued()»
		public void set«name.toFirstUpper()»(Set<«type.fqnForPackage(this.class)»> «name»){
			this.«name» = «name»;
		}
		
		public Set<«type.fqnForPackage(this.class)»> get«name.toFirstUpper()»( ){
			return «name»;
		}
	«ELSE»
		public void set«name.toFirstUpper()»(«type.fqnForPackage(this.class)» «name»){
			this.«name» = «name»;
		}
		
		public «type.fqnForPackage(this.class)» get«name.toFirstUpper()»( ){
			return «name»;
		}
	«ENDIF»
«ENDDEFINE»

«REM» For associations we need to set name to type name if the name is null ;«ENDREM»
«DEFINE setDefaultNamesForAssocs FOR uml::Property»
	«IF !(name != null && name.length > 0 )»
		«LET type.name.toFirstLower() AS defaultName»

			«IF isMultivalued()» «REM» For collections we need to create a plural default type name«ENDREM»
				«setName(defaultName.getPlural())»
			«ELSE»
				«setName(defaultName)»
			«ENDIF»
			
		«ENDLET»
	«ENDIF»
«ENDDEFINE»


«REM» For classes in entitiespackage we need to default to 'Enity' profile if no sterotype is specified «ENDREM»
«DEFINE applyEntityStereotype FOR wcprofile::EntitiesPackage»
	«FOREACH allOwnedElements().typeSelect(uml::Class) AS c»
		«IF c.getStereotypeApplications().isEmpty »
			«c.applyEntityStereoType()»
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»


«DEFINE EnumGen FOR uml::Enumeration»
	«FILE packagePath() + "/"+ name +".java"»  
	package «packageName()»;
	
	public enum «name» {		
		«FOREACH  ownedLiteral AS e»
			«e.name»,
		«ENDFOREACH»
	} 
	«ENDFILE»
«ENDDEFINE»

