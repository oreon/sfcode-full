«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»

«DEFINE genEditView(boolean edit) FOR uml::Class»
	«setCurrentEditMode(edit)» 
	«FILE getWebPath() +"/" + (edit?"edit":"view") + name+ "." + getExtension()»
<ui:composition «EXPAND WebRoot::genIncludes-»
	template = "«getTemplate()»" >	
	<ui:define name="content">
		<ui:include src = "«(edit?"edit":"view") + name+ "Component." + getExtension()»" />
	</ui:define> 
</ui:composition>
	«ENDFILE»
	«EXPAND genEditViewComponent(edit) FOR this»
«ENDDEFINE»


«DEFINE genEditViewComponent(boolean edit) FOR uml::Class»
	«FILE getWebPath() +"/" + (edit?"edit":"view") + name+ "Component." + getExtension()»
	<html «EXPAND WebRoot::genIncludes-» >	
	<ice:panelGroup  >
		<ice:form>
			<s:validateAll>
			«setAsCurrentEntity(this)-»
			<h:panelGrid columns="«edit?"3":"2"»" styleClass="viewInfo" columnClasses="leftCol, rightCol">
			<f:facet name="header">
				<h:outputText value="«name» " />
			</f:facet>
			«EXPAND genAttribAsOutput FOR this-»
			</h:panelGrid>
			«EXPAND genTable FOR this-»
			</s:validateAll>
				«EXPAND genCancelSaveBtns(edit) FOR this»
		</ice:form>
	</ice:panelGroup>
	</html>
	«ENDFILE»
«ENDDEFINE»


«DEFINE genCancelSaveBtns(boolean edit) FOR uml::Class»
	<div class="buttonBox">
		«IF !edit»
		<h:commandButton value="Edit"  rendered="#{s:hasRole('admin')}" action="edit" /> 
		<h:outputText value=" " />
		<h:commandButton value="Back To Listing" immediate="true" action="#{«getAction()».cancel}" /> 
		«ELSE»
		<h:commandButton value="Save" action="#{«getAction()».save}" /> 
		<h:outputText value=" " />
		<h:commandButton value="Cancel" immediate="true" action="#{«getAction()».cancel}" /> 
		«ENDIF»
	</div>
«ENDDEFINE»

«DEFINE genAttribAsOutput FOR uml::Class-»
	«FOREACH allParents() AS e-»
			«EXPAND genAttribute FOREACH e.getAllAttributes().select(a|!a.isMultivalued()) -»
	«ENDFOREACH»
	«EXPAND genAttribute FOREACH getAllAttributes().select(a|!a.isMultivalued()) -»
«ENDDEFINE»

«REM»For multivalued attributes e.g. an order's order items«ENDREM»
«DEFINE genTable FOR uml::Class»
	«FOREACH allParents() AS e-»
		«EXPAND gentEditableTable FOREACH e.getComposed() -»
	«ENDFOREACH»
	«EXPAND gentEditableTable FOREACH getComposed() -»
«ENDDEFINE»

«DEFINE genAttribute FOR uml::Property -»
	«IF association == null || opposite.type.name != getCurrentEntity().name»
	«IF association != null -»
		«IF type.isEmbeddable()-»
			«type.setCurrentEmbeddable()»
			«EXPAND genAttribAsOutput FOR this.type-»
		«ELSE»
			«EXPAND genLabelAndControl FOR this-»
		«ENDIF»
	«ELSE-»
		«EXPAND genLabelAndControl FOR this»
	«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE genLabelAndControl FOR uml::Property»
	«IF isCurrentEditMode()»
		«EXPAND genLabelAndInput FOR this»
	«ELSE»
		«EXPAND genLabelAndOutput FOR this»
	«ENDIF»
«ENDDEFINE»


«DEFINE genLabelAndInput FOR uml::Property-»
	«IF !isDerived()  »
		«getAccess() != null?" <s:div rendered=\"#{s:hasRole('admin')}\">":""»
		«getOutputMessage()»
		«IF association != null»
			«EXPAND genAssociation»
		«ELSE»
			«EXPAND genPropertyEntry(type) FOR this»
		«ENDIF»
		«getErrorMessageHolder()»
		«isCurrentMultiMode()?"</h:column>":""»
		«getAccess() != null?"</s:div>":""»
	«ENDIF»
«ENDDEFINE»

«DEFINE genLabelAndOutput FOR uml::Property-»
	«IF !isSecret()  »
		«getAccess() != null?" <s:div rendered=\"#{s:hasRole('admin')}\">":""»
		«getOutputMessage()»
		«IF association != null»
			«EXPAND genAssociation»
		«ELSE»
			«EXPAND genPropertyEntry(type) FOR this»
		«ENDIF»
		«getErrorMessageHolder()»
		«isCurrentMultiMode()?"</h:column>":""»
		«getAccess() != null?"</s:div>":""»
	«ENDIF»
«ENDDEFINE»


«DEFINE genAssociation FOR uml::Property -»
	«IF !isCurrentEditMode()»
	<«getTextControl()» value="#{«EXPAND genAssociationPropertyLabel-».displayName}" />
	«ELSE»
	<h:selectOneMenu id="«getId()»" value="#{«EXPAND genAssociationPropertyLabel-»}" required="«!getAssocOptional()»">
		<s:selectItems value="#{«type.asVar()»List}" var="itemIter"
			label="#{itemIter.displayName}"
			noSelectionLabel="Please Select..." />
		<s:convertEntity />
	</h:selectOneMenu>
	«ENDIF»
«ENDDEFINE»

«DEFINE genAssociationPropertyLabel FOR uml::Property»
«getCurrentEntity().asVar()».«class.isEmbeddable()?getCurrentEmbeddable().asVar() + ".":""»«name.toFirstLower()»
«ENDDEFINE»

«DEFINE genPropertyEntry(uml::PrimitiveType cls) FOR uml::Property-»
«IF type.name == "imageFile"»
	«getTextForImgFile()» 
«ELSE»
	<«getTextControl()»  id="«getId()»" «isCurrentEditMode()? "required=\"" + getRequired() +"\"":""»  value="#{«getCurrentEntity().asVar()».«class.isEmbeddable()?getCurrentEmbeddable().asVar() + ".":""»«name.toFirstLower()»}" />
«ENDIF»   
«ENDDEFINE»

«DEFINE genPropertyEntry(wcprofile::dataTypes::imageFile cls) FOR uml::Property-»
	«getTextForImgFile()»
«ENDDEFINE»


«DEFINE genPropertyEntry(uml::Enumeration enm) FOR uml::Property-»
	«IF !isCurrentEditMode()»
	<«getTextControl()» id="«getId()»" value="#{«getCurrentEntity().asVar()».«class.isEmbeddable()?getCurrentEmbeddable().asVar() + ".":""»«name.toFirstLower()»}" />
	«ELSE»
	<h:selectOneMenu id="«getId()»" value="#{«getCurrentEntity().asVar()».«name»}" required="«getAssocOptional()»">
		<f:selectItem itemLabel="Please Select..." itemValue="" />
		«FOREACH  enm.ownedLiteral AS e-»
		<f:selectItem itemLabel="«e.name»" itemValue="«e.name-»" />
		«ENDFOREACH»
	</h:selectOneMenu>
	«ENDIF»
«ENDDEFINE»


«DEFINE gentEditableTable FOR uml::Property-»
	«setCurrentMultiMode(true)-»
	
	«IF isCurrentEditMode()»
	«EXPAND genNewButton FOR this»
	«ENDIF»
	
	<ice:dataTable id="«name»_data" var="«type.asVar()»" rendered="#{not empty «getCurrentEntity().getAction()».list«name.toFirstUpper()»}"
					value="#{«getCurrentEntity().getAction()».list«name.toFirstUpper()»}" rows="10"
				rowClasses="odd, even" styleClass="dataTable" rules="all">
		«setAsCurrentEntity(type)»
		«EXPAND genAttribAsOutput FOR type-»
		«REM» comment	
		«EXPAND genTable FOR type-»
		«ENDREM»
		«IF isCurrentEditMode()»
		«EXPAND genNew»
		«EXPAND genDelete FOR this»
		«ELSE»
		«EXPAND ListRoot::genPropsFromBusinessEntity FOR class»
		«ENDIF»	
	</ice:dataTable>
	«setCurrentMultiMode(false)-»
«ENDDEFINE»

«DEFINE genDelete FOR uml::Property»
	<h:column>
		<ice:commandButton value="Delete" action="#{«class.getAction()».delete«name.toFirstUpper()»(«type.asVar()»)}" immediate="true">
			<s:conversationId/>
		</ice:commandButton>
	</h:column>
«ENDDEFINE»

«DEFINE genNew FOR uml::Property»
	<h:column>
		«EXPAND genNewButton FOR this»
	</h:column>
«ENDDEFINE»

«DEFINE genNewButton FOR uml::Property»
	<h:commandButton  value="New «name.toFirstUpper().getSingular()»" action="#{«class.getAction()».add«name.toFirstUpper()»}" >
		<s:conversationId/>
	</h:commandButton>
«ENDDEFINE»
