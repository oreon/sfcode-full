//import metamodel;
import uml;
import java;
import wcprofile;

extension org::openarchitectureware::uml2::profile::profiling;

//extension metamodel::Extensions reexport;

//path of the package - 
String packagePath (Element cls) :
packageNameWithoutRoot(cls.package).replaceAll("::|\\.", "/");

//fully qualified name of a class
String fqn (Type cls) :
packageName(cls) + "." + cls.name;

//get interfaces
getInterfaces(Class cls):
JAVA org.wc.generatorutil.ClassUtil.getInterfaces(org.eclipse.uml2.uml.Class);


getOpReturnType(Operation op):
op.type == null ? "void":op.type.fqn().removeExtraPackage();
//JAVA org.wc.generatorutil.ClassUtil.getOpReturnType(org.eclipse.uml2.uml.Operation);

//For return types we get 'collections.List' but we only want 'List'
String removeExtraPackage(String arg):
arg.replaceAll("collections.", "");

getParametersSignature(Operation op):
JAVA org.wc.generatorutil.ClassUtil.getParametersSignature(org.eclipse.uml2.uml.Operation);

getParameters(Operation op):
JAVA org.wc.generatorutil.ClassUtil.getParameters(org.eclipse.uml2.uml.Operation);


//for primitive type we will simply return the classname - no need for package declaration
String fqn (PrimitiveType cls) :
getTypeName(cls.name);

//If package of referring class is same as this class - will return simple name else fqn
String fqnForPackage(Type cls, Class referringClass):
(packageName(cls) == (packageName(referringClass)) )?getTypeName(cls.name):fqn(cls);

//get type name for types array - useful for mapping e.g. imageFile is mapped to byte[]
String getTypeName(String name):
JAVA org.wc.generatorutil.ClassUtil.getTypeName(java.lang.String);

String getTypeAnnotation(String name):
JAVA org.wc.generatorutil.ClassUtil.getTypeAnnotation(java.lang.String);

//If package of referring class is same as this class - will return simple name else fqn
String fqnForPackage(PrimitiveType cls, Class referringClass):
getTypeName(cls.name);

applyEntityStereoType(Class cls):
//cls.package.createOwnedClass(cls.name, true)->
//cls.getModel().applyProfile("C:/users/jsingh/mdl/wcprofile.profile.uml") ->
cls.applyStereotype("wcprofile::Entity");


String packageName (Element cls) :
packageNameWithoutRoot(cls.package).replaceAll("::", ".");

//in case of magicdraw we need to remove the root "Data" package
String packageNameWithoutRoot(Package package):
if ( package !=null && package.getQualifiedName() != null && package.getQualifiedName().startsWith("Data") ) then 
	package.getQualifiedName().replaceAll("Data::", "")
else if ( package.getQualifiedName().startsWith("wcprofile") ) then 
	package.getQualifiedName().replaceAll("wcprofile::", "")
else
package.getQualifiedName();

//Returns lower case name e.g. Student will be returned as student
String asVar(Class cls):
cls.name.toFirstLower();



//Returns plural of a word e.g input book will return books for Class will return Classes
String getPlural(String word):
word.endsWith("s")?word + "es": word + "s";

String getSingular(String word):
JAVA org.wc.generatorutil.ClassUtil.getSingular(java.lang.String);


//get the parent
String getParent(Class cls):
cls.parents().size > 0 ? getExtensionKeyword() + cls.parents().get(0).fqn():"";


//get the parent
String getParent(Entity cls):
getExtensionKeyword() + ( cls.parents().size > 0 ? cls.parents().get(0).fqn():" BusinessEntity ");

//get the parent
String getParent(MappedSuperClass cls):
getExtensionKeyword() + ( cls.parents().size > 0 ? cls.parents().get(0).name:" BusinessEntity ");

String getExtensionKeyword():
if( getCurrentCartridge() == "DOT_NET" ) then
	":"
else
	" extends ";

String getCartridge():
readProperty("cartridge");
	
	

String getAssocOptional(Property prop):
prop.lowerBound() > 0?false:true;

ModelObject getContainer(Operation op):
op.class != null ? op.class : op.interface;


getAssocUpdatable(Property prop):
true;

getAssocUpdatable(Column col):
col.mutable;



boolean isEmbeddable(Type type):
type.getAppliedStereotype("wcprofile::Embeddable") != null;

boolean isColumn(Property type):
type.getAppliedStereotype("wcprofile::Column") != null;


String getValidatorAnnotations(Column col):
col.notNull?"@NotNull":"";

String getLengthAnnotations(Column col):
col.minLength > 0 ?"@Length(min=" + col.minLength + ")"  :"";

String getUniqueAnnotations(Column col):
col.uniqueProperty == true?"@Unique(entityName = " + "\"" + fqn(col.class) + "\"" + ", fieldName = " + "\"" + col.name + "\"" + ")":"";


//need to add quotes if default is a string type
getDefaultVal(Property prop, PrimitiveType type):
prop.type.name == "String" ? "\"" + prop.getDefault() + "\"": prop.getDefault();

//need to add quotes if default is a string type
getDefaultVal(Property prop, Enumeration type):
prop.type.name + "." +  prop.getDefault();


getTransient(Column col):
col.isDerived() ? "@Transient":"";

isDerived(Column col):
col.derivedProperty != null;

isDerived(Property col):
false;

isSecret(Column col):
col.secret == true;

isSecret(Property prop):
false;

isType(Property prop, String typeName):
prop.type.name == typeName;

isString(Property prop):
isType(prop, "String") || isType(prop, "uniqueNameType") || isType(prop, "nameType");


//Read property from workflow properties file
String readProperty(String arg):
JAVA org.wc.generatorutil.ClassUtil.readProperty(java.lang.String);


getDisplayName(Class entity):
//JAVA org.wc.generatorutil.ClassUtil.readProperty(java.lang.String);
if( entity.displayName != null ) then
	 entity.displayName
else if ( ! ( entity.parents().isEmpty)  && entity.parents().get(0).displayName != null) then
	"super.getDisplayName()"
else 
 	entity.getDisplayNameFromAttribs();
 
 //Read property from workflow properties file
String getDisplayNameFromAttribs(Class entity):
JAVA org.wc.generatorutil.ClassUtil.getDisplayNameFromAttribs(org.eclipse.uml2.uml.Class);
 
 
String getCurrentCartridge():
JAVA org.wc.generatorutil.ClassUtil.getCurrentCartridge();


setCurrentCartridge(String currentCartridge):
JAVA org.wc.generatorutil.ClassUtil.setCurrentCartridge(java.lang.String);

 //split the given string by ',' and return a list 
 getStringsAsList(String arg):
 arg.split(","); 
 

 getColJpaAnnotations(Column col):
 col.association == null? "@Column(name = \"" +  (col.columnName != null ? col.columnName : col.name) +  "\"," + "unique=" + col.uniqueProperty + ")":"";
 
getTableName(Entity entity):
entity.tableName!=null?entity.tableName.toLowerCase():entity.name.toLowerCase();

//get restful Type.
getRestfulType(RestfulOperation restOp):
if ( restOp.restfulType!=null && restOp.restfulType.length > 0 ) then 
	"@"+restOp.restfulType.toUpperCase();

//get restful Role Type.
getRestfulRoleType(RestfulOperation restOp):
if ( restOp.roleType != null && restOp.roleType.length > 0 ) then 
	"@"+restOp.roleType.toLowerCase();
	
//get restful Produces.
getRestfulProduces(RestfulOperation restOp):
if ( restOp.Produces != null && restOp.Produces.length > 0 ) then 
	"@Produces(\""+restOp.Produces.toLowerCase()+"\")";
	
//get restful Consumes.
getRestfulConsumes(RestfulOperation restOp):
if ( restOp.Consumes != null && restOp.Consumes.length > 0 ) then 
	"@Consumes(\""+restOp.Consumes.toLowerCase()+"\")";
	
//get restful Path.
getRestfulPath(RestfulOperation restOp):
if ( restOp.Path != null && restOp.Path.length > 0 ) then 
	"@Path(\""+restOp.Path+"\")";

//get class level Path
String getRestfulPath(RestfulClass cls):
if(cls.Path != null && cls.Path.length > 0) then
"@Path(\""+cls.Path+"\")";

//get class level Path
String getRestfulProduces(RestfulClass cls):
if(cls.Produces != null && cls.Produces.length > 0 ) then
"@Produces(\""+cls.Produces+"\")";

//get class level Path
String getRestfulPath(RestfulInterface cls):
if(cls.Path != null && cls.Path.length > 0 ) then
"@Path(\""+cls.Path+"\")";

//get class level Path
String getRestfulProduces(RestfulInterface cls):
if(cls.Produces != null && cls.Produces.length > 0 ) then
"@Produces(\""+cls.Produces+"\")";

//parameters PathParam
getPathParameter(RestfulParameter op):
if(op.PathParam != null && op.PathParam.length > 0 ) then
"@PathParam(\"" + op.PathParam +"\")";