//import metamodel;
import uml;
import java;
import wcprofile;

extension org::openarchitectureware::uml2::profile::profiling;

//extension metamodel::Extensions reexport;

//path of the package - 
String packagePath (Element cls) :
packageNameWithoutRoot(cls.package).replaceAll("::|\\.", "/");

String packagePath(String str):
str.replaceAll("::|\\.", "/");

//fully qualified name of a class
String fqn (Type cls) :
packageName(cls) + "." + cls.name;

String fqnPackage (Type cls, String package) :
packageName(cls) + "." +  package + "." + cls.name;




//get interfaces
getInterfaces(Class cls):
JAVA org.wc.generatorutil.ClassUtil.getInterfaces(org.eclipse.uml2.uml.Class);

getRandomNumber():
JAVA org.wc.generatorutil.ClassUtil.getRandomNumber();

getAsList(String str):
JAVA org.wc.generatorutil.ClassUtil.getListFromCommaDeleimtedString(java.lang.String);



getOpReturnType(Operation op):
op.type == null ? "void":op.type.fqn().removeExtraPackage();
//JAVA org.wc.generatorutil.ClassUtil.getOpReturnType(org.eclipse.uml2.uml.Operation);

getOpReturnTypeTemplateParam(Operation op):
op.ownedTemplateSignature == null ? "": "<" +  op.ownedTemplateSignature.ownedParameter.get(0).ownedElement.superClass.get(0).fqn() + ">";
//JAVA org.wc.generatorutil.ClassUtil.getOpReturnType(org.eclipse.uml2.uml.Operation);


//For return types we get 'collections.List' but we only want 'List'
String removeExtraPackage(String arg):
arg.replaceAll("collections.", "");

getParametersSignature(Operation op):
JAVA org.wc.generatorutil.ClassUtil.getParametersSignature(org.eclipse.uml2.uml.Operation);

getParametersSignature(Property p):
p.type.fqnForPackage(p.class) + " " + p.name;


getParameters(Operation op):
JAVA org.wc.generatorutil.ClassUtil.getParameters(org.eclipse.uml2.uml.Operation);


//for primitive type we will simply return the classname - no need for package declaration
String fqn (PrimitiveType cls) :
getTypeName(cls.name);

//If package of referring class is same as this class - will return simple name else fqn
String fqnForPackage(Type cls, Class referringClass):
(packageName(cls) == (packageName(referringClass)) )?getTypeName(cls.name):fqn(cls);

//get type name for types array - useful for mapping e.g. imageFile is mapped to byte[]
String getTypeName(String name):
JAVA org.wc.generatorutil.ClassUtil.getTypeName(java.lang.String);

String getTypeAnnotation(String name):
JAVA org.wc.generatorutil.ClassUtil.getTypeAnnotation(java.lang.String);

//If package of referring class is same as this class - will return simple name else fqn
String fqnForPackage(PrimitiveType cls, Class referringClass):
getTypeName(cls.name);

applyEntityStereoType(Class cls):
//cls.package.createOwnedClass(cls.name, true)->
//cls.getModel().applyProfile("C:/users/jsingh/mdl/wcprofile.profile.uml") ->
cls.applyStereotype("wcprofile::Entity");


String packageName (Element cls) :
packageNameWithoutRoot(cls.package).replaceAll("::", ".");

//in case of magicdraw we need to remove the root "Data" package
String packageNameWithoutRoot(Package package):
if ( package !=null && package.getQualifiedName() != null && package.getQualifiedName().startsWith("Data") ) then 
	package.getQualifiedName().replaceAll("Data::", "")
else if ( package.getQualifiedName().startsWith("wcprofile") ) then 
	package.getQualifiedName().replaceAll("wcprofile::", "")
else
package.getQualifiedName();

//Returns lower case name e.g. Student will be returned as student
String asVar(Class cls):
cls.name.toFirstLower();

boolean isRangeType(Type type):
type.name == "Double" || type.name == "Integer" || type.name == "Date";


boolean getAuditable(Type type):
type.auditable;

//Returns plural of a word e.g input book will return books for Class will return Classes
String getPlural(String word):
word.endsWith("s")?word + "es": word + "s";

String getSingular(String word):
JAVA org.wc.generatorutil.ClassUtil.getSingular(java.lang.String);


//get the parent
String getParent(Class cls):
cls.parents().size > 0 ? getExtensionKeyword() + cls.getFirstParent() :"";

String getFirstParent(Class cls):
cls.parents().size > 0 ? cls.parents().get(0).fqn():"";


String getVariableNameForDisplay(String arg):
JAVA org.wc.generatorutil.ClassUtil.getViewLabelFromVariable(java.lang.String);


String removeSpaces(String arg):
JAVA org.wc.generatorutil.ClassUtil.removeSpaces(java.lang.String);



//get the parent
String getParent(Entity cls):
getExtensionKeyword() + ( cls.parents().size > 0 ? cls.parents().get(0).fqn():" BusinessEntity ");

//get the parent
String getParent(MappedSuperClass cls):
getExtensionKeyword() + ( cls.parents().size > 0 ? cls.parents().get(0).name:" BusinessEntity ");

String getExtensionKeyword():
if( getCurrentCartridge() == "DOT_NET" ) then
	":"
else
	" extends ";

String getCartridge():
readProperty("cartridge");

String getTopLevelPackage():
readProperty("topLevelPackage");
	
String getTopLevelPackagePath():
getTopLevelPackage().packagePath();
	

ModelObject getContainer(Operation op):
op.class != null ? op.class : op.interface;


getAssocUpdatable(Property prop):
true;

getAssocUpdatable(Column col):
col.mutable;


//both one to one and 
//boolean isViewEmbeddable(Type type):
//isTypeEmbeddable(type) ;
attribsOfThisClass(Class cls):
JAVA org.wc.generatorutil.ClassUtil.attribsOfThisClass(org.eclipse.uml2.uml.Class);

getDeployName(Property prop):
JAVA org.wc.generatorutil.ClassUtil.getDeployName(org.eclipse.uml2.uml.Property);


getFirstChild(Class c):
JAVA org.wc.generatorutil.ClassUtil.getFirstChild(org.eclipse.uml2.uml.Class);


boolean isEmbeddable(Type type):
type.getAppliedStereotype("wcprofile::Embeddable") != null;

boolean isMappedSuperClass(Type type):
type.getAppliedStereotype("wcprofile::MappedSuperClass") != null || type.getAppliedStereotype("wcprofile::MappedSuperclass") != null ;

boolean isProcessToken(Entity type):
type.getAppliedStereotype("wcprofile::ProcessToken") != null;

boolean hasStereo(Type type, String stereo):
type.getAppliedStereotype("wcprofile::" + stereo) != null;


boolean systemModify(Property prop):
prop.isColumn()  && prop.systemModifyOnly == true;

boolean isColumn(Property type):
type.getAppliedStereotype("wcprofile::Column") != null;

boolean isViewState(State state):
state.getAppliedStereotype("wcprofile::ViewState") != null;

boolean isFile(Property property):
property.type.name == "imageFile";

boolean isDate(Property property):
property.type.name == "Date";


String getValidatorAnnotations(Column col):
col.notNull?"@NotNull":"";

String getLengthAnnotations(Column col):
col.minLength > 0 ?"@Length(min=" + col.minLength + ")"  :"";

String getUniqueAnnotations(Column col):
col.uniqueProperty == true?"//@Unique(entityName = " + "\"" + fqn(col.class) + "\"" + ", fieldName = " + "\"" + col.name + "\"" + ")":"";


//need to add quotes if default is a string type
getDefaultVal(Property prop, PrimitiveType type):
prop.type.name == "String" ? "\"" + prop.getDefault() + "\"": prop.getDefault();

//need to add quotes if default is a string type
getDefaultVal(Property prop, Enumeration type):
prop.type.name + "." +  prop.getDefault();


getTransient(Column col):
col.derivedFormula != null ? "@Formula(value =" +  "\"" + col.derivedFormula + "\")":"";  


isDerived(Column col):
col.derivedProperty != null;

isDerived(Property col):
false;

isSecret(Column col):
col.secret == true;

isSecret(Property prop):
false;

isType(Property prop, String typeName):
prop.type.name == typeName;

isString(Property prop):
isType(prop, "String") || isType(prop, "uniqueNameType") || isType(prop, "nameType") || isType(prop, "largeText");


//Read property from workflow properties file
String readProperty(String arg):
JAVA org.wc.generatorutil.ClassUtil.readProperty(java.lang.String);

String readPropertyDef(String arg, String def):
JAVA org.wc.generatorutil.ClassUtil.readProperty(java.lang.String, java.lang.String);



getDisplayName(Class entity):
//JAVA org.wc.generatorutil.ClassUtil.readProperty(java.lang.String);
if( entity.displayName != null ) then
	 entity.displayName
else if ( ! ( entity.parents().isEmpty)  && entity.parents().get(0).displayName != null) then
	"super.getDisplayName()"
else 
 	entity.getDisplayNameFromAttribs();
 
 //Read property from workflow properties file
String getDisplayNameFromAttribs(Class entity):
JAVA org.wc.generatorutil.ClassUtil.getDisplayNameFromAttribs(org.eclipse.uml2.uml.Class);
 
 
String getCurrentCartridge():
JAVA org.wc.generatorutil.ClassUtil.getCurrentCartridge();


setCurrentCartridge(String currentCartridge):
JAVA org.wc.generatorutil.ClassUtil.setCurrentCartridge(java.lang.String);


serialver (Class cls) : 
JAVA org.wc.generatorutil.ClassUtil.serialver(org.eclipse.uml2.uml.Class);

outgoing (DecisionNode act) : 
JAVA org.wc.generatorutil.ClassUtil.outgoing(org.eclipse.uml2.uml.ActivityNode);

outgoing (ForkNode act) : 
JAVA org.wc.generatorutil.ClassUtil.outgoing(org.eclipse.uml2.uml.ActivityNode);

outgoing (JoinNode act) : 
JAVA org.wc.generatorutil.ClassUtil.outgoing(org.eclipse.uml2.uml.ActivityNode);


outgoing (Action act) : 
JAVA org.wc.generatorutil.ClassUtil.outgoing(org.eclipse.uml2.uml.ActivityNode);

outgoing (InitialNode act) : 
JAVA org.wc.generatorutil.ClassUtil.outgoing(org.eclipse.uml2.uml.ActivityNode);

getSwimlane (Action act) : 
JAVA org.wc.generatorutil.ClassUtil.getSwimlane(org.eclipse.uml2.uml.ActivityNode);

getSwimlane (InitialNode act) : 
JAVA org.wc.generatorutil.ClassUtil.getSwimlane(org.eclipse.uml2.uml.ActivityNode);

 //split the given string by ',' and return a list 
 getStringsAsList(String arg):
 arg.split(","); 
 

 getColJpaAnnotations(Column col):
 col.association == null? "@Column(name = \"" +  (col.columnName != null ? col.columnName : col.name) +  "\"," + "unique=" + col.uniqueProperty + ")":"";
 
getTableName(Entity entity):
entity.tableName!=null?entity.tableName.toLowerCase():entity.name.toLowerCase();


getQyeryTypeByReturnType(Operation op):
op.type == "List" ? "" : "SingleResult";

getWorkflowActionPath(Activity act):
getTopLevelPackage().packagePath() + "/web/action/workflowmgt/"  + act.name.toFirstLower() ;

getWorkflowPathForFile(Activity act):
getTopLevelPackage().packagePath() + "/web/action/workflowmgt/"  + act.name.toFirstUpper() ;

getWebPackageName(Activity act):
getTopLevelPackage() + ".web.action.workflowmgt" ;


getTransName(ActivityEdge o):
o.name;

getNotify(Action a):
getDefaultNotify();

getNotify(Task a):
a.notify == null ? getDefaultNotify() : a.notify;

getDefaultNotify():
readPropertyDef("defaultNotify", "false" );

getTaskMassagedName(ActivityNode a):
JAVA org.wc.generatorutil.ClassUtil.getTaskMassagedName(org.eclipse.uml2.uml.NamedElement);

getTaskMassagedName(ActivityPartition a):
JAVA org.wc.generatorutil.ClassUtil.getTaskMassagedName(org.eclipse.uml2.uml.NamedElement);



getTaskMassagedName(ControlFlow a):
JAVA org.wc.generatorutil.ClassUtil.getTaskMassagedName(org.eclipse.uml2.uml.NamedElement);



getCounter() :
JAVA org.wc.generatorutil.ClassUtil.getCounter();

resetCounter():
JAVA org.wc.generatorutil.ClassUtil.resetCounter();

//tree fields
String getTreeParent(Entity e):
getTreeParentJava ( e.treeFlds );

String getTreeParentJava(String s):
JAVA org.wc.generatorutil.ClassUtil.getTreeParent(java.lang.String);

String getTreeChildren(Entity e):
getTreeChildrenJava ( e.treeFlds );

String getTreeChildrenJava(String s):
JAVA org.wc.generatorutil.ClassUtil.getTreeChildren(java.lang.String);

String getTreeDetailsFld(Entity e):
getTreeDetailsFldJava ( e.treeFlds );

String getTreeDetailsFldJava(String s):
JAVA org.wc.generatorutil.ClassUtil.getTreeDetails(java.lang.String);

//get a property by name
getAttrib(Class c,String s):
JAVA org.wc.generatorutil.ClassUtil.getAttrib(org.eclipse.uml2.uml.Class, java.lang.String);


getCounters():
JAVA org.wc.generatorutil.ClassUtil.getCounters();

String getRandValue (Property attribute) :
JAVA org.wc.generatorutil.RandomValueGenerator.getRandomValue(org.eclipse.uml2.uml.Property);


boolean isPrimitive(Type type):
JAVA org.wc.generatorutil.ClassUtil.isPrimitive(org.eclipse.uml2.uml.Type);

elToJava(String str):
JAVA org.wc.generatorutil.ClassUtil.elToJava(java.lang.String);



