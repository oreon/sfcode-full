//import metamodel;
import uml;
import java;
import wcprofile;

extension org::openarchitectureware::uml2::profile::profiling;


//extension metamodel::Extensions reexport;

//path of the package - 
String packagePath (Element cls) :
packageNameWithoutRoot(cls.package).replaceAll("::|\\.", "/");

//fully qualified name of a class
String fqn (Type cls) :
packageName(cls) + "." + cls.name;

//get interfaces
getInterfaces(Class cls):
JAVA org.wc.generatorutil.ClassUtil.getInterfaces(org.eclipse.uml2.uml.Class);

//for primitive type we will simply return the classname - no need for package declaration
String fqn (PrimitiveType cls) :
getTypeName(cls.name);

//If package of referring class is same as this class - will return simple name else fqn
String fqnForPackage(Type cls, Class referringClass):
(packageName(cls) == (packageName(referringClass)) )?getTypeName(cls.name):fqn(cls);

//get type name for types array - useful for mapping e.g. imageFile is mapped to byte[]
String getTypeName(String name):
JAVA org.wc.generatorutil.ClassUtil.getTypeName(java.lang.String);

String getTypeAnnotation(String name):
JAVA org.wc.generatorutil.ClassUtil.getTypeAnnotation(java.lang.String);

//If package of referring class is same as this class - will return simple name else fqn
String fqnForPackage(PrimitiveType cls, Class referringClass):
getTypeName(cls.name);

applyEntityStereoType(Class cls):
//cls.package.createOwnedClass(cls.name, true)->
//cls.getModel().applyProfile("C:/users/jsingh/mdl/wcprofile.profile.uml") ->
cls.applyStereotype("wcprofile::Entity");


String packageName (Element cls) :
packageNameWithoutRoot(cls.package).replaceAll("::", ".");

//in case of magicdraw we need to remove the root "Data" package
String packageNameWithoutRoot(Package package):
package.getQualifiedName().startsWith("Data")?package.getQualifiedName().replaceAll("Data::", ""):
package.getQualifiedName();

//Returns lower case name e.g. Student will be returned as student
String asVar(Class cls):
cls.name.toFirstLower();



//Returns plural of a word e.g input book will return books for Class will return Classes
String getPlural(String word):
word.endsWith("s")?word + "es": word + "s";



//get the parent
String getParent(Class cls):
cls.parents().size > 0 ?" extends " + cls.parents().get(0).name:"";


//get the parent
String getParent(Entity cls):
" extends " + ( cls.parents().size > 0 ? cls.parents().get(0).name:" BusinessEntity ");

//get the parent
String getParent(MappedSuperClass cls):
" extends " + ( cls.parents().size > 0 ? cls.parents().get(0).name:" BusinessEntity ");

String getAssocOptional(Property prop):
prop.lowerBound() > 0?false:true;


boolean isEmbeddable(Type type):
type.getAppliedStereotype("wcprofile::Embeddable") != null;

boolean isColumn(Property type):
type.getAppliedStereotype("wcprofile::Column") != null;


String getValidatorAnnotations(Column col):
col.notNull?"@NotNull":"";

String getLengthAnnotations(Column col):
col.minLength > 0 ?"@Length(min=" + col.minLength + ")"  :"";

String getUniqueAnnotations(Column col):
col.uniqueProperty == true?"//@Unique":"";

//e.g. To get order Items for an order 
getComposed(Class cls):
cls.getAllAttributes().select(a|a.isMultivalued() && a.association != null);

//e.g customer would be needed of the given order
getOutgoingAssociations(Class cls):
cls.getAllAttributes().select(a|a.isMultivalued() == false && a.association != null);


//need to add quotes if default is a string type
getDefaultVal(Property prop, PrimitiveType type):
prop.type.name == "String" ? "\"" + prop.getDefault() + "\"": prop.getDefault();

//need to add quotes if default is a string type
getDefaultVal(Property prop, Enumeration type):
prop.type.name + "." +  prop.getDefault();


getTransient(Column col):
col.derivedProperty != null ? "@Transient":"";

isSecret(Column col):
col.secret == true;

isSecret(Property prop):
false;

isType(Property prop, String typeName):
prop.type.name == typeName;
