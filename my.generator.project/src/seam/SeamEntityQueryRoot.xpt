«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::associationExtensions»

«EXTENSION template::WebExtensions»

«DEFINE Root FOR uml::Model»
	«EXPAND BaseGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	«EXPAND ManualGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
«ENDDEFINE»


«DEFINE ManualGen FOR wcprofile::Entity»
«FILE packagePath() +"/action/" +name+ "ListQuery.java"  man_path »
package « packageName() ».action;

«EXPAND genImports FOR this»	
@Name("«asVar()»List")
@Scope(ScopeType.CONVERSATION)
public class «name»ListQuery extends «name»ListQueryBase implements java.io.Serializable{
	
	}
«ENDFILE»
«ENDDEFINE»


«DEFINE BaseGen FOR uml::Class»
«setAsCurrentEntity(this)-»
«FILE packagePath() +"/action/" +name+"ListQueryBase.java"»
package « packageName() ».action;

import « packageName() ».«name»;

import org.witchcraft.seam.action.BaseAction; 

«EXPAND genImports FOR this»


import «packageName()».«name»;

/**
 * @author WitchcraftMDA Seam Cartridge
 *
 */
public abstract class «name»ListQueryBase extends BaseQuery<«name», Long> {

    private static final String EJBQL = "select «asVar()» from «name» «asVar()»";
    
    private «name» «name.toFirstLower()» = new «name»();
    
   	private static final String[] RESTRICTIONS = {
		«EXPAND genAttribAsOutput FOR this»
	
		"«asVar()».dateCreated <= #{«asVar()»List.dateCreatedRange.end}",
		"«asVar()».dateCreated >= #{«asVar()»List.dateCreatedRange.begin}",
	};

	public «name»ListQueryBase() {
		setEjbql(EJBQL);
		setRestrictionExpressionStrings(Arrays.asList(RESTRICTIONS));
		setMaxResults(25);
	}

	public «name» get«name»() {
		return «asVar()»;
	}
}
«ENDFILE»
«ENDDEFINE»


«DEFINE genAttribAsOutput FOR uml::Class»
	«FOREACH allParents() AS e-»
	«EXPAND genAttribute FOREACH e.getAllAttributes().select( a |!a.isMultivalued() && !a.isSecret()  ) -»
	«ENDFOREACH»
	«EXPAND genAttribute FOREACH getAllAttributes().select(a|!a.isMultivalued() && !a.isSecret()) -»
«ENDDEFINE»

«DEFINE genAttribute FOR uml::Property -»
	«IF association != null -»
		«IF isMultivalued() || isSecret()»
		«ELSE»
			«IF type.getAppliedStereotype("wcprofile::Embeddable") != null-»
				«type.setCurrentEmbeddable()»
				«EXPAND genAttribAsOutput FOR this.type-»
			«ELSE»
				«EXPAND genAssociation FOR this-»
			«ENDIF»
		«ENDIF»
	«ELSE-»
		«EXPAND genProperty FOR this-»
	«ENDIF»
«ENDDEFINE»

«DEFINE genProperty FOR uml::Property-»	
«IF this.isString()»
 "lower(«genPropertyLabel()») like concat(lower(#{«getCurrentEntity().asVar()»List.«genPropertyLabel()»}),'%')",
«ENDIF»
«ENDDEFINE»

«DEFINE genAssociation FOR uml::Property-»	
 "«genPropertyLabel()» = #{«getCurrentEntity().asVar()»List.«genPropertyLabel()»})",
«ENDDEFINE»




«DEFINE genImports FOR wcprofile::Entity»

import java.util.Arrays;
import java.util.Date;

import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;
import org.jboss.seam.framework.EntityQuery;
import org.witchcraft.base.entity.BaseQuery;
import org.witchcraft.base.entity.Range;
	
«ENDDEFINE»
