«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::associationExtensions»

«EXTENSION template::WebExtensions»


«DEFINE Root FOR uml::Model»
	«EXPAND PackageRoot FOREACH allOwnedElements().typeSelect(uml::Package)»
	«EXPAND SeamEntityQueryRoot::Root FOR this»
	«EXPAND richfaces::PagesRoot::genPages»
«ENDDEFINE»

«DEFINE PackageRoot FOR uml::Package»
	«EXPAND BaseGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	«EXPAND BaseGen FOREACH allOwnedElements().typeSelect(wcprofile::MappedSuperClass)»
	«EXPAND ManualGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
«ENDDEFINE»
	
	



«DEFINE ManualGen FOR wcprofile::Entity»

	«FILE getWebPackagePath("Action")  man_path »
	
	package « getWebPackageName() »;
	
	«EXPAND genImports FOR this»	
	//@Scope(ScopeType.CONVERSATION)
	@Name("«asVar()»Action")
	public class «name»Action extends «name»ActionBase implements java.io.Serializable{
		
	}
	«ENDFILE»

«ENDDEFINE»

«DEFINE BaseGen FOR wcprofile::MappedSuperClass»

	«FILE getWebPackagePath("Action")  man_path »
	
package « getWebPackageName() »;

«EXPAND genImports FOR this»	
import org.witchcraft.seam.action.BaseAction; 
import org.witchcraft.base.entity.BusinessEntity;

public  abstract class «name»Action<T extends BusinessEntity> extends BaseAction<T> implements java.io.Serializable{
	
}
	«ENDFILE»

«ENDDEFINE»


«DEFINE BaseGen FOR wcprofile::Entity»
«FILE getWebPackagePath("ActionBase")   »
package « getWebPackageName() »;

import « packageName() ».«name»;

import org.witchcraft.seam.action.BaseAction; 

«EXPAND genImports FOR this»
«FOREACH getComposed() AS a-»
import «a.type.fqn()»;
«ENDFOREACH»


public abstract class «name»ActionBase extends «getFirstParent() == null || getFirstParent().length == 0 ? "BaseAction<" +  name + ">" : parents().get(0).getActionFqn() + " <" + name + ">" » implements java.io.Serializable{

	@In(create = true)
	@Out(required = false)
	@DataModelSelection
	private «name» «asVar()»;
	
	
	«FOREACH getOutgoingAssociations() AS e»
	 @In(create = true, value="«e.type.name.toFirstLower()»Action")
	 «e.type.getActionFqn()» «e.name»Action;
	«ENDFOREACH»
	
	«FOREACH getNonComposedManyAssociations() AS e»
	 @In(create = true,  value="«e.type.name.toFirstLower()»List")
 	«e.type.getListFqn()» «e.name.getSingular()»List;
	«ENDFOREACH»

	@DataModel
	private List<«name»> «asVar()»RecordList;	
	
	public void set«name»Id(Long id) {
	«FOREACH getComposed() AS e»
	   if(list«e.name.toFirstUpper()» == null || isDifferentFromCurrent(id ) )
			list«e.name.toFirstUpper()»  = new ArrayList<«e.type.name»>();
	«ENDFOREACH»
		setId(id);
		loadAssociations();
	}
	
	«FOREACH getOutgoingAssociations() AS e-»
	public void set«e.name.toFirstUpper()»Id(Long id) {
	   if(id != null && id > 0 )
			getInstance().set«e.name.toFirstUpper()»(«e.name»Action.loadFromId(id));
	}

	public Long get«e.name.toFirstUpper()»Id() {
		if (getInstance().get«e.name.toFirstUpper()»() != null)
			return getInstance().get«e.name.toFirstUpper()»().getId();
		return 0L;
	}
	«ENDFOREACH»
	

	public Long get«name»Id() {
		return (Long) getId();
	}
	

	//@Factory("«asVar()»RecordList")
	//@Observer("archived«name»")
	public void findRecords() {
		//search();
	}	

	public «name» getEntity(){
		return «asVar()»;
	}

	@Override
	public void setEntity(«name» t) {
		this.«asVar()» = t;
		loadAssociations();
	}
	
	public «name» get«name»(){
		return getInstance();
	}
	
	
	@Override
	protected «name» createInstance() {
		return new «name»();
	}

	public void load() {
		if (isIdDefined()) {
			wire();
		}
	}

	public void wire() {
		getInstance();
		«FOREACH getOutgoingAssociations() AS e-»
		«e.type.fqn()» «e.name» = «e.name»Action.getDefinedInstance();
		if («e.name» != null) {
			getInstance().set«e.name.toFirstUpper()»(«e.name»);
		}
		«ENDFOREACH»
	}

	public boolean isWired() {
		return true;
	}

	public «name» getDefinedInstance() {
		return isIdDefined() ? getInstance() : null;
	}
	

	public void set«name»(«name» t) {
		this.«asVar()» = t;
		loadAssociations();
	}
	
	@Override
	public Class<«name»> getEntityClass() {
		return «name».class;
	}

	@Override
	public void setEntityList(List<«name»> list) {
		this.«asVar()»RecordList = list;
	}
	
	«EXPAND template::Root::genUnqNamedQryOp  FOREACH getAllAttributes()»
	
	
	«REM»comment
	«IF treeHierarchy != null»
		public List<«name»> getTopLevel«getTreeParent().toFirstUpper»(){
			return  getEntityManager().createQuery("select e from «name» e where e.«getTreeParent()» is null").getResultList();
		}
	«ENDIF»
	«ENDREM»
	
	«FOREACH getAllAttributes().select ( e | e.isFile() ) AS e»	
	public String download«e.name.toFirstUpper()»(Long id) {
		setId(id);
		downloadAttachment(getInstance().get«e.name.toFirstUpper()»());
		return "success";
	}
	«ENDFOREACH»
	
	
	
	«IF !getOutgoingAssociations().isEmpty»
	/** This function adds associated entities to an example criterion
	 * @see org.witchcraft.model.support.dao.BaseAction#createExampleCriteria(java.lang.Object)
	 */
	public void addAssoications(Criteria criteria) {
		«FOREACH getOutgoingAssociations() AS e»
		if («asVar()».get«e.name.toFirstUpper()»() != null) {
			criteria = criteria.add(Restrictions.eq("«e.name».id", «asVar()».get«e.name.toFirstUpper()»().getId()));
		}
		«ENDFOREACH»
	}
	«ENDIF»
	
	/** This function is responsible for loading associations for the given entity e.g. when viewing an order, we load the customer so
	 * that customer can be shown on the customer tab within viewOrder.xhtml
	 * @see org.witchcraft.seam.action.BaseAction#loadAssociations()
	 */
	public void loadAssociations(){
		«FOREACH getOutgoingAssociations() AS e»
		if («asVar()».get«e.name.toFirstUpper()»() != null) {
			«e.name»Action.setInstance(getInstance().get«e.name.toFirstUpper()»());
		}
		«ENDFOREACH»
		
		«IF !getNonComposedManyAssociations().isEmpty»
		try{
		«FOREACH getNonComposedManyAssociations() AS e»
		«e.type.asVar()»List.get«e.name.toFirstUpper().getSingular()»().set«e.opposite.name.toFirstUpper()»(getInstance());
		«ENDFOREACH»
		}catch(Exception e){
			facesMessages.add(e.getMessage());
		}
		«ENDIF»
		
	}
	
	public void updateAssociations(){
		«FOREACH getNonComposedManyAssociations() AS a»
		«a.type.fqn()» «a.type.name.toFirstLower()» =(«a.type.fqn()») org.jboss.seam.Component.getInstance("«a.type.name.toFirstLower()»");
		«a.type.name.toFirstLower()».set«a.opposite.name.toFirstUpper()»(«asVar()»);
		events.raiseTransactionSuccessEvent("archived«a.type.name»");
		«ENDFOREACH»
	}
	
	
	«EXPAND genCompositeCode FOREACH getComposed() -»
	«EXPAND genManyToMany FOREACH getLeadingManyToMany() -»
	
	
	public void updateComposedAssociations(){
		«EXPAND updateList FOREACH getComposed() -»
		«EXPAND updateList FOREACH getLeadingManyToMany() -»
	}
	
	
	public List<«name»> getEntityList(){
		if(«asVar()»RecordList == null){
			findRecords();
		}
		return «asVar()»RecordList;
	}
	
	«EXPAND template::Root::genOperation FOREACH getAllOperations()»
	
	
	«REM» Generate methods  for  «ENDREM»
	«FOREACH getModel().allOwnedElements().typeSelect(uml::Class).select(a | a.name == ( this.name + "Action") ) AS a»
		«EXPAND template::Root::genOperation FOREACH a.getAllOperations()»
	«ENDFOREACH»
	
	
}
«ENDFILE»
«ENDDEFINE»

«DEFINE updateList FOR uml::Property»
	  if (list«name.toFirstUpper()» != null) {
		getInstance().get«name.toFirstUpper()»().clear();
		getInstance().get«name.toFirstUpper()»().addAll(list«name.toFirstUpper()»);
	  }
«ENDDEFINE»


«DEFINE genManyToMany FOR uml::Property»
	«EXPAND genList( "") FOR this»
	«EXPAND genList( "Available") FOR this»
«ENDDEFINE»



«DEFINE genCompositeCode FOR uml::Property»
	
	«EXPAND genList("") FOR this»
	«LET "list" + name.toFirstUpper()  AS currentList»
	public void delete«name.toFirstUpper()»(int index){
		«currentList».remove(index);
	}
	
	@Begin(join=true)
	public void add«name.toFirstUpper()»(){
		«type.name» «name» = new «type.name»();
		«IF opposite != null && opposite.isNavigable()»
			«name».set«opposite.name.toFirstUpper()»(getInstance());
		«ENDIF»
		«currentList».add(«name»);
	}
	
	«ENDLET»
«ENDDEFINE»

«DEFINE genList(String prefix) FOR uml::Property»
	
	«LET "list" + prefix + name.toFirstUpper()  AS currentList»
	
	protected List<«type.fqn()»> «currentList»;
	
	void init«currentList.toFirstUpper()»(){
		«currentList» = new ArrayList<«type.fqn()»>();
		
		«IF isLeadingManyToMany() && prefix == "Available"»
			«currentList» = getEntityManager().createQuery("select r from «type.name» r").getResultList();
			«currentList».removeAll(getInstance().get«name.toFirstUpper()»());
		«ELSE»
		if(getInstance().get«name.toFirstUpper()»().isEmpty()){
			«IF !getAssocOptional()»add«name.toFirstUpper()»();«ENDIF»
		}
		else
			«currentList».addAll(getInstance().get«name.toFirstUpper()»());
		«ENDIF»
	}
	
	public List<«type.fqn()»> get«currentList.toFirstUpper()»() {
		if(«currentList» == null || «currentList».isEmpty() ){
			init«currentList.toFirstUpper()»();
		}
		return «currentList»;
	}

	public void set«currentList.toFirstUpper()»(List<«type.fqn()»> «currentList») {
		this.«currentList» = «currentList»;
	}
	«ENDLET»
«ENDDEFINE»


«DEFINE genImports FOR uml::Class»
import java.util.ArrayList;
import java.util.List;

import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.persistence.EntityManager;

import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;

import org.apache.commons.lang.StringUtils;

import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Scope;

import org.jboss.seam.annotations.Begin;
import org.jboss.seam.annotations.End;
import org.jboss.seam.annotations.Factory;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Out;
import org.jboss.seam.Component;

import org.jboss.seam.annotations.datamodel.DataModel;
import org.jboss.seam.annotations.datamodel.DataModelSelection;
import org.jboss.seam.faces.FacesMessages;
import org.jboss.seam.log.Log;
import org.jboss.seam.annotations.Observer;
«ENDDEFINE»

