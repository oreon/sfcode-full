«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::associationExtensions»

«EXTENSION template::WebExtensions»


«DEFINE Root FOR uml::Model»
	«EXPAND BaseGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	«EXPAND ManualGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	«EXPAND SeamEntityQueryRoot::Root FOR this»
	«EXPAND richfaces::PagesRoot::genPages»
«ENDDEFINE»


«DEFINE ManualGen FOR wcprofile::Entity»
«FILE packagePath() +"/action/" +name+ "Action.java"  man_path »
package « packageName() ».action;

«EXPAND genImports FOR this»	
@Scope(ScopeType.CONVERSATION)
@Name("«asVar()»Action")
	public class «name»Action extends «name»ActionBase implements java.io.Serializable{
	
	}
«ENDFILE»
«ENDDEFINE»


«DEFINE BaseGen FOR uml::Class»
«FILE packagePath() +"/action/" +name+"ActionBase.java"»
package « packageName() ».action;

import « packageName() ».«name»;

import org.witchcraft.seam.action.BaseAction; 

«EXPAND genImports FOR this»
«FOREACH getComposed() AS a-»
import «a.type.fqn()»;
«ENDFOREACH»


public class «name»ActionBase extends BaseAction<«name»> implements java.io.Serializable{

	@In(create = true)
	@Out(required = false)
	@DataModelSelection
	private «name» «asVar()»;

	@DataModel
	private List<«name»> «asVar()»List;	

	@Factory("«asVar()»RecordList")
	@Observer("archived«name»")
	public void findRecords() {
		search();
	}	

	public «name» getEntity(){
		return «asVar()»;
	}

	@Override
	public void setEntity(«name» t) {
		this.«asVar()» = t;
	}

	@Override
	public void setEntityList(List<«name»> list) {
		this.«asVar()»List = list;
	}
	
	«IF !getOutgoingAssociations().isEmpty»
	/** This function adds associated entities to an example criterion
	 * @see org.witchcraft.model.support.dao.BaseAction#createExampleCriteria(java.lang.Object)
	 */
	public void addAssoications(Criteria criteria) {
		«FOREACH getOutgoingAssociations() AS e»
		if («asVar()».get«e.name.toFirstUpper()»() != null) {
			criteria = criteria.add(Restrictions.eq("«e.name».id", «asVar()».get«e.name.toFirstUpper()»().getId()));
		}
		«ENDFOREACH»
	}
	«ENDIF»
	
	public void updateAssociations(){
		«FOREACH getNonComposedManyAssociations() AS a»
		«a.type.fqn()» «a.type.name.toFirstLower()» =(«a.type.fqn()») org.jboss.seam.Component.getInstance("«a.type.name.toFirstLower()»");
		«a.type.name.toFirstLower()».set«a.opposite.name.toFirstUpper()»(«asVar()»);
		events.raiseTransactionSuccessEvent("archived«a.type.name»");
		«ENDFOREACH»
	}
	
	
	«EXPAND genCompositeCode FOREACH getComposed() -»
	
	«IF ! ( getComposed().isEmpty )»
	public void updateComposedAssociations(){
	«FOREACH getComposed() AS e»
		«e.class.asVar()».get«e.name.toFirstUpper()»().clear();
		«e.class.asVar()».get«e.name.toFirstUpper()»().addAll(«"list" + e.name.toFirstUpper()»);
	«ENDFOREACH»
	}
	«ENDIF»
	
	public List<«name»> getEntityList(){
		if(«asVar()»List == null){
			findRecords();
		}
		return «asVar()»List;
	}
	
	«EXPAND Root::genOperation FOREACH getAllOperations()»
	
}
«ENDFILE»
«ENDDEFINE»


«DEFINE genCompositeCode FOR uml::Property»
	
	«LET "list" + name.toFirstUpper()  AS currentList»
	
	private List<«type.name»> «currentList»;
	
	void initList«name.toFirstUpper()»(){
		«currentList» = new ArrayList<«type.name»>();
		if(«class.asVar()».get«name.toFirstUpper()»().isEmpty()){
			«IF !getAssocOptional()»
			add«name.toFirstUpper()»();
			«ENDIF»
		}
		else
			«currentList».addAll(«class.asVar()».get«name.toFirstUpper()»());
	}
	
	public List<«type.name»> getList«name.toFirstUpper()»() {
		if(«currentList» == null){
			initList«name.toFirstUpper()»();
		}
		return «currentList»;
	}

	public void setList«name.toFirstUpper()»(List<«type.name»> «currentList») {
		this.«currentList» = «currentList»;
	}
	
	public void delete«name.toFirstUpper()»(«type.name» «name»){
		«currentList».remove(«name»);
	}
	
	@Begin(join=true)
	public void add«name.toFirstUpper()»(){
		«type.name» «name» = new «type.name»();
		«IF opposite != null && opposite.isNavigable()»
			«name».set«opposite.name.toFirstUpper()»(«class.asVar()»);
		«ENDIF»
		«currentList».add(«name»);
	}
	
	«ENDLET»
«ENDDEFINE»


«DEFINE genImports FOR wcprofile::Entity»
import java.util.ArrayList;
import java.util.List;

import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.persistence.EntityManager;

import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;

import org.apache.commons.lang.StringUtils;

import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Scope;

import org.jboss.seam.annotations.Begin;
import org.jboss.seam.annotations.End;
import org.jboss.seam.annotations.Factory;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Out;

import org.jboss.seam.annotations.datamodel.DataModel;
import org.jboss.seam.annotations.datamodel.DataModelSelection;
import org.jboss.seam.faces.FacesMessages;
import org.jboss.seam.log.Log;
import org.jboss.seam.annotations.Observer;
«ENDDEFINE»

