<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="location">
        	<value>classpath:db.properties</value>
    	</property>
    </bean>
    
	<!-- This element is used to enable autodetection of the stereotyped classes in the base package defined. -->
	<context:component-scan base-package="${package}.dao" />
	
	<!-- This element is used to automatically register all of Spring's standard post-processors for annotation-based configuration. -->
	<context:annotation-config />
	
	<!-- The data source. -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    	<property name="url" value="${db.url}" />
    	<property name="driverClassName" value="${db.driverClassName}" />
    	<property name="username" value="${db.username}" />
    	<property name="password" value="${db.password}" />
	</bean>
	
	<!-- The LocalContainerEntityManagerFactoryBean creates an EntityManagerFactory. The LocalContainerEntityManagerFactoryBean gives full control over 
		EntityManagerFactory configuration and is appropriate for environments where fine-grained customization is required. 
		The LocalContainerEntityManagerFactoryBean creates a PersistenceUnitInfo instance based on the persistence.xml file, 
		the supplied dataSourceLookup strategy, and the specified loadTimeWeaver. It is thus possible to work with custom data sources outside of JNDI 
		and to control the weaving process. -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="persistenceUnitName" value="${rootArtifactId}PersistenceUnit" />
        <property name="jpaVendorAdapter">
	    	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
	    	</bean>
        </property>
	</bean>
</beans>