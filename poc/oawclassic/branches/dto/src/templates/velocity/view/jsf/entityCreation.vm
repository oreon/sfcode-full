##Generates attributes for the given class and all its components

 #set($renderContext = ${manager.createCreateContext()}  )  

#macro(generateAttributesForClass $cls $clsName)
	         		#generateAttributes($cls $clsName)
		  	       
		  	        ## get all the embeddable components 
		  	       #set($componentMap = ${manager.getComponents($cls).get("components")} )
  	       
		  	       #foreach( $component in ${componentMap.keySet()} )
		  	        #set($compClass = ${componentMap.get($component)})
		  	        #set($compName = "$clsName.${component}")			
		  	        #generateAttributes(  $compClass $compName )
		  	       			#end
		  	       			
		  	       			 			## get all the associations 
		  	       			 #set($associationsMap = ${manager.getComponents($cls).get("associations")} )
		  	       			 #foreach( $assocName in ${associationsMap.keySet()} )			
		  	         #assocInputHtm($assocName $clsName)
		  	       			 #end
#end

#macro( generateAttributes $cls $clsName )
	  			#foreach( $attribute in $cls.Attribute())			
		  	  #attributeInputHtm($attribute $clsName )     			  
		  				#end
#end 

## e.g values attribute - city clsName - customer.primaryAddress component-primaryAddress 
#macro( attributeInputHtm $attribute $clsName )
		    <h:outputText value="${utils.getViewLabel($attribute)}" styleClass="formLabel" /> 
		    #set($inputComponent = ${manager.getInputComponent($attribute, $renderContext)}  )  
    <${inputComponent.getType($attribute)} ${inputComponent.getAttributes($attribute)} required="${inputComponent.isRequired($attribute)}"  
    		     id="${clsName.replace('.', '_')}_${attribute.NameS()}" value="#{${utils.asVariable($clazz.NameS() )}CrudBacking.$clsName.${attribute.NameS()}}"  >
    			  ${inputComponent.getContent($attribute)}
    </${inputComponent.getType($attribute)}> 
    <h:message for="${clsName.replace('.', '_')}_${attribute.NameS()}" styleClass="errMessage" />
#end 

## e.g values attribute - city clsName - customer.primaryAddress component-primaryAddress 
#macro( assocInputHtm $assocName $clsName )
		    <h:outputText value="${utils.getViewLabel($assocName)}" styleClass="formLabel" /> 
    <h:inputText id="${clsName.replace('.', '_')}_$assocName" value="#{${utils.asVariable($clazz.NameS() )}CrudBacking.$clsName.${assocName}.id}"  /> 
    <h:message for="${clsName.replace('.', '_')}_$assocName" styleClass="errMessage" />
#end 


#include("templates/velocity/view/jsf/xmlns.vm")

	<ui:define name="content">
	
			    <h:messages layout="list" globalOnly="true" showDetail="true" styleClass="messages" />
	
    <f:view>
            <a4j:form id="form">
            		  <rich:panel >
				  				               <h:panelGrid columns="3" styleClass="formTable" >
				  				               <f:facet name="header">
   					 	                 <h:outputText value="${clazz.NameS()} Information" styleClass="formHeaderText"/>
  				               </f:facet>
				  				               
				  				   ##set the current class name e.g. customer 
				  #set($clsName = ${utils.asVariable($clazz.NameS() )} )             
				  				               
				  				          
				 
				  #foreach( $superclass in ${manager.getSuperClasses($clazz)} )			
 		  	#generateAttributesForClass($superclass $clsName)       			
  				#end			
		  			
		  	#generateAttributesForClass($clazz $clsName)      
		  	
		  		
		  							   <h:commandButton id="button1" value="Submit" action="#{${clsName}CrudBacking.update}"/> 
		  							    <h:commandButton id="button2" value="Cancel" action="#{${clsName}CrudBacking.cancelUpdate}" immediate="true"/> 
		  				    ## We need to have a hidden text field to store the id of the record being edited		
				  				     	<h:inputHidden id="${clsName}_id" value="#{${clsName}CrudBacking.${clsName}.id}" />
		  		
				                  </h:panelGrid>
				                   </rich:panel>
             </a4j:form>
        </f:view>
    
    </ui:define>
</ui:composition>
						
		