«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT oaw4::demo::classic::uml::meta»
«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT java»

«EXTENSION java::NamingConventions»
«EXTENSION java::Associations»
«REM» TODO this file has functions duplicated from association.xpt «ENDREM»

«REM»Generates the body of a java class with attributes and associations«ENDREM»
«DEFINE genClassBody( String assocExt) FOR Class»
		«FOREACH Attribute AS a»
			private «a.Type.NameS» «a.NameS»;
		«ENDFOREACH»
		
		«EXPAND ReferenceVariables(assocExt)»
	
		«FOREACH Attribute AS a»
			«EXPAND CommonUtils::genGetterSetter(  a.Type.NameS, a.NameS) FOR a.NameS »
		«ENDFOREACH»
		
		«EXPAND AccessorMethods(assocExt)»
«ENDDEFINE»
		

«DEFINE ReferenceVariables( String assocExt) FOR Class»
	«FOREACH AssociationEnd.Opposite.select(ae|ae.isNavigable) AS ae»
		private «ae.memberDeclaration(assocExt)»;
	«ENDFOREACH»
«ENDDEFINE»


«DEFINE AccessorMethods( String assocExt) FOR Class»
	«EXPAND ToOneAccessorMethods(assocExt) FOREACH
		AssociationEnd.Opposite.select(ae|!ae.isMultiple && ae.isNavigable)»
	«EXPAND ToManyAccessorMethods(assocExt) FOREACH
		AssociationEnd.Opposite.select(ae|ae.isMultiple && ae.isNavigable)»
«ENDDEFINE»

«DEFINE ToOneAccessorMethods( String assocExt) FOR AssociationEnd»
	public «fullNameIfRequired() + assocExt» «asGetter()» () {
		return this.«asInstanceVar()»;
	}

	public void «asSetter()» («fullNameIfRequired() + assocExt» «asParameter()») {
		this.«asInstanceVar()» = «asParameter()»;
	}
«ENDDEFINE»

«DEFINE ToManyAccessorMethods( String assocExt) FOR AssociationEnd»

«LET fullNameIfRequrired(assocExt) + assocExt AS associationClass»

	public void add«removeTrailingS(associationName().toFirstUpper())» («associationClass» «asParameter()») {
		//checkMaximum«associationName().toFirstUpper()»();
		«IF Opposite.isNavigable -»
			«asParameter()».«Opposite.asSetter()»(this);
		«ENDIF-»
		this.«asInstanceVar()».add(«asParameter()»);
	}

	public void remove«removeTrailingS(NameS.toFirstUpper())» («associationClass»
		«asParameter()») {
		this.«asInstanceVar()».remove(«asParameter()»);
	}
	
	public java.util.Set<«Class.NameS + getDtoExtenstion()»> «asGetter()» () {
		return this.«asInstanceVar()»;
	}

	public void «asSetter()» (java.util.Set<«associationClass»> «asParameter()») {
		this.«asInstanceVar()» = «asParameter()»;
	}


	/** Method size on the set doesn't work with technologies requiring 
	 *  java beans get/set  interface so we provide a getter method 
	 * @return
	 */ 
	public int «asGetter()»Count(){
		return this.«asInstanceVar()».size();
	}
	
	/*
	public void checkMaximum«associationName().toFirstUpper()»(){
		// if(«associationName()».size() > Constants.size())
		// 		throw new BusinessException ("msg.tooMany." + «associationName()» );
	}*/
«ENDLET»
«ENDDEFINE»






	
