«IMPORT wcprofile»
«EXTENSION org::openarchitectureware::uml2::profile::profiling»

«EXTENSION template::associationExtensions»
«EXTENSION template::GeneratorExtensions»

«AROUND javagen::pojo::pojoroot::genClassAnnotations  FOR uml::Class»
	/**
	 * This file is an Service Class generated by Witchcraftmda.
	 * DO NOT MODIFY any changes will be overwritten with the next run of the code generator.
	 */
	«EXPAND genClassAnnotations FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genImports  FOR uml::Class»
	«EXPAND genPersistenceImports FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genBaseClassAnnotations  FOR uml::Class»
	«EXPAND genBaseClassAnnotations FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genPropertyAnnotations FOR uml::Property»
	«EXPAND genPropertyAnnotations FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genAdditionalMethods  FOR uml::Class»
	«EXPAND genOperations FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«DEFINE genOperations FOR wcprofile::Service»
	 «EXPAND genWrappedOperation FOREACH getAllOperations()»
«ENDDEFINE»


«DEFINE genOperations FOR uml::Class»
«ENDDEFINE»


«DEFINE genWrappedOperation FOR uml::Operation»
      /**
       * «EXPAND javagen::pojo::pojoroot::genDocumentation »
       «FOREACH ownedParameter.select( e | !e.isReturn() ) AS e-»
       * @param «e.name»  «e.type.name» «e.getDocumentation()» 
       *«ENDFOREACH»
       * @return «type.name»
       */
      //@Restrict("#{s:hasPermission('«class.name»','«name»')}")
      «visibility» «getOpReturnType()» «getOpReturnTypeTemplateParam()»  «name» («EXPAND genParamSignature(false)») {
      		 
			«EXPAND applyConstaints FOREACH ownedParameter.select( e | !e.isReturn() )»
			
     		//logger.info("starting «name» ......" + «EXPAND genParams-» );
	                
            «IF !isVoid()» «EXPAND genParamSignature(true) FOR this» result = «ENDIF» do«name.toFirstUpper()»(«EXPAND genParams-»);
           
           logger.info("finished «name» ....." «IF !isVoid()» + " returning - " + result«type.name == "List" ?  ".size()  + \" entries \" ": ""» «ENDIF»);
           «IF !isVoid()» return  result  ; «ENDIF» 
      }
     
      /**
       * «ownedComment.body»
       */
      «IF readPropertyDef("generateAbstractMethods","true") == "true"»
       	protected  abstract  «getOpReturnType()» «getOpReturnTypeTemplateParam()»  do«name.toFirstUpper()» («getParametersSignature()») ;
      «ELSE»
      	protected «getOpReturnType()» «getOpReturnTypeTemplateParam()»  do«name.toFirstUpper()» («getParametersSignature()»){
           «IF type != null» return null; «ENDIF»
      	}
      «ENDIF»
«ENDDEFINE»


«DEFINE methodSignature(String prefix) FOR uml::Operation-»
       «IF isVoid()-» void «ELSE-» «EXPAND genParamSignature(true) FOR this» «ENDIF»  «prefix»«prefix != "" ? name.toFirstUpper() : name-» («EXPAND genParamSignature(false) FOR this-»)«EXPAND genExceptions FOR this»
«ENDDEFINE»

«DEFINE genParamSignature FOR uml::Operation-»  

«ENDDEFINE»
 
«DEFINE genParamSignature(boolean isret) FOR uml::Operation-»  
	«FOREACH ownedParameter.select( a | ( isret ? a.name == "" : a.name != "" ) ) AS a  SEPARATOR ','-»
	      «a.type.fqn()-» «a.name-»«REM» TODO - find a mechanism for generalizing many «ENDREM»
	«ENDFOREACH-»
«ENDDEFINE»

 «DEFINE genParams FOR uml::Operation-»  
	«FOREACH ownedParameter.select( a |  a.name == ""  ) AS a  SEPARATOR ','-»
	      «a.name-»«REM» TODO - find a mechanism for generalizing many «ENDREM»
	«ENDFOREACH-»
«ENDDEFINE»


«DEFINE applyConstaints FOR uml::Parameter»
	«IF getAllConstraints().size > 0»
	
	«FOREACH getAllConstraints() AS c»
		Preconditions.checkArgument(«c.specification.body.get(0).replaceAll(":self",name) »,
			"«c.errorMessage != null ? c.errorMessage.replaceAll(":self",name) : "Invalid " + name»  %s ", «name»);
	«ENDFOREACH»
	
	«ENDIF»
«ENDDEFINE»


«DEFINE genExceptions FOR uml::Operation-»
	«IF raisedException.size > 0 -» throws «ENDIF» «FOREACH raisedException AS e SEPARATOR ',' » «e.fqn()-» «ENDFOREACH»
«ENDDEFINE»
	







«DEFINE genBaseClassAnnotations FOR uml::Class»
«ENDDEFINE»

«DEFINE genClassAnnotations FOR uml::Class»
«ENDDEFINE»






«DEFINE genPropertyAnnotations FOR uml::Property»
	
«ENDDEFINE»


«DEFINE genSimplePropertyAnnotations FOR wcprofile::Column»
	«getNotNullAnnotations()»
	«IF validator != null »«getValidatorAnnotations()»«ENDIF»
	«getLengthAnnotations()»
	«getUniqueAnnotations()»
	«REM»«getUniqueAnnotationsProp()»«ENDREM»
	«getTransient()»
	«type.name.getTypeAnnotation()»
	«IF !isDerived()»«getColJpaAnnotations()» «ENDIF»
«ENDDEFINE»


«DEFINE genAssocPropertyAnnotations FOR wcprofile::Column»
	
«ENDDEFINE»


«DEFINE genManyToMany FOR uml::Property»
	
«ENDDEFINE»


«DEFINE genPersistenceImports FOR uml::Class»
«ENDDEFINE»


«DEFINE genPersistenceImports FOR wcprofile::AbstractEntity»
	import javax.persistence.*;	
	import org.witchcraft.base.entity.FileAttachment;
	import org.witchcraft.base.entity.BaseEntity;
	import org.hibernate.annotations.Filter;
	import org.hibernate.annotations.Filters;
	
	import javax.validation.constraints.*;
	
	import java.math.BigDecimal;
«ENDDEFINE»


«DEFINE genAdditionalMethods FOR uml::Class»  
	«EXPAND genDisplayname FOR this»
«ENDDEFINE»


«DEFINE genDisplayname FOR uml::Class»

«ENDDEFINE»



«DEFINE genPackageDetails FOR uml::Package»
	
«ENDDEFINE»