«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::associationExtensions»

«EXTENSION template::WebExtensions»

«DEFINE Root FOR uml::Model»
	«EXPAND BaseGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	«EXPAND ManualGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)» 
«ENDDEFINE»


«DEFINE ManualGen FOR wcprofile::Entity»
«FILE getWebPackagePath("ListQuery")  man_path »
package « getWebPackageName() »;

«EXPAND genImports FOR this»	
@Name("«asVar()»List")
//@Scope(ScopeType.CONVERSATION)
public class «name»ListQuery extends «name»ListQueryBase implements java.io.Serializable{
	
}
«ENDFILE»
«ENDDEFINE»


«DEFINE BaseGen FOR uml::Class»

«setAsCurrentEntity(this)-»
«FILE getWebPackagePath("ListQueryBase")   »
package « getWebPackageName() »;

import « packageName() ».«name»;

import org.witchcraft.seam.action.BaseAction; 

«EXPAND genImports FOR this»


import «packageName()».«name»;

/**
* 
 * @author WitchcraftMDA Seam Cartridge - 
 *
 */
public abstract class «name»ListQueryBase extends  BaseQuery<«name», Long> {

    private static final String EJBQL = "select «asVar()» from «name» «asVar()»";
    
    protected «name» «asVar()» = new «IF isAbstract» «getFirstChild().fqn()» «ELSE» «name» «ENDIF»();
    
    
    @In(create=true)
	«name»Action «asVar()»Action;
	
	
	public «name»ListQueryBase() {
		super();
		setOrderColumn("id" );
		setOrderDirection("desc");
	}
    
    
    public «name» get«name»() {
		return «asVar()»;
	}
	
	@Override
	public «name» getInstance() {
		return get«name»();
	}
	
	
	«FOREACH allParents() AS e-»
	 «EXPAND genManyToManySearch FOREACH e.getAllAttributes().select(a|a.isManyToMany()  ) -»
	«ENDFOREACH»
	
	«EXPAND genManyToManySearch FOREACH getAllAttributes().select(a|a.isManyToMany()  ) -»


	
	@Override
	protected String getql() {
		return EJBQL;
	}
	
	@Override
	//@Restrict("#{s:hasPermission('«asVar()»', 'view')}")
	public List<«name»> getResultList() {
		return super.getResultList();
	}


	@Override
	public Class<«name»> getEntityClass() {
		return «name».class;
	}
	
	@Override
	public String[] getEntityRestrictions() {
		return RESTRICTIONS;
	}
	
	
	«IF cacheType != null && cacheType.name != "NONE"»
	@Override
	@SuppressWarnings("unchecked")
	public void validate() {
		setQueryCacheable();
		super.validate();
	}
	«ENDIF»
	
    
    «EXPAND genAttribAsOutput(true) FOR this»
   
   	private static final String[] RESTRICTIONS = {
   		"«asVar()».id = #{«asVar()»List.«asVar()».id}",
   		
   		"«asVar()».archived = #{«asVar()»List.«asVar()».archived}",
   	
		«EXPAND genAttribAsOutput(false) FOR this»
		
		"«asVar()».dateCreated <= #{«asVar()»List.dateCreatedRange.end}",
		"«asVar()».dateCreated >= #{«asVar()»List.dateCreatedRange.begin}",
	};
	
	
	«FOREACH getOutgoingAssociations() AS e»
	«IF !e.type.isAbstract && e.opposite.name != null»
	public List<«name»> get«e.opposite.name.toFirstUpper()»By«e.name.toFirstUpper()»(«e.type.fqn()» «e.type.asVar()»){
		«asVar()».set«e.name.toFirstUpper()»(«e.type.asVar()»);
		return getResultList();
	}
	«ENDIF»
	«ENDFOREACH»

	
	@Observer("archived«name»")
	public void onArchive(){
		refresh();
	}	
	
	«IF autoCompleteColumns != null»
	@Override
	protected void setupForAutoComplete(String input){
		«FOREACH autoCompleteColumns.getAsList() AS e»
			«name.toFirstLower()».«e.elToJava()»(input);
		«ENDFOREACH»
	}
	«ENDIF»
	
	
	«FOREACH getOutgoingAssociations() AS e»
		«IF !e.type.isAbstract»
		public void set«e.name.toFirstUpper()»Id(Long id){
			if(«asVar()».get«e.name.toFirstUpper()»() == null ){
				«asVar()».set«e.name.toFirstUpper()»(new «e.type.fqn()»());
			}
			«asVar()».get«e.name.toFirstUpper()»().setId(id);
		}
		
		public Long get«e.name.toFirstUpper()»Id(){
			return «asVar()».get«e.name.toFirstUpper()»() == null ? null : «asVar()».get«e.name.toFirstUpper()»().getId();
		}
		«ENDIF»
	«ENDFOREACH»
	
	
	//@Restrict("#{s:hasPermission('«asVar()»', 'delete')}")
	public void archiveById(Long id) {
		«asVar()»Action.archiveById(id);
		refresh();
	}
	
	
	/** create comma delimited row 
	 * @param builder
	 */
	//@Override
	public void createCsvString(StringBuilder builder, «name» e){
		«FOREACH getAllAttributes().select(a|a.isSearchable()  )  AS a»
			«IF a.association != null && !a.type.isEmbeddable() && !a.isMultivalued()-»
				builder.append("\"" + (e.get«a.name.toFirstUpper()»() != null ?e.get«a.name.toFirstUpper()»().getDisplayName().replace("," , ""):"")   + "\",");
			«ELSE»
				builder.append("\"" + (e.get«a.name.toFirstUpper()»() != null ?e.get«a.name.toFirstUpper()»()«IF a.isString()».replace("," , "")«ENDIF»:""  ) + "\",");
			«ENDIF»
		«ENDFOREACH»
		builder.append("\r\n");
	}
	
	/** create the headings 
	 * @param builder
	 */
	 //@Override
	public void createCSvTitles(StringBuilder builder ){
		«FOREACH getAllAttributes().select(a|a.isSearchable()  )  AS a»
			builder.append("«a.name.toFirstUpper()»" + ",");
		«ENDFOREACH»
		builder.append("\r\n");
	}
}
«ENDFILE»
«ENDDEFINE»




«DEFINE genAttribAsOutput(boolean createRangeDeclarations)  FOR uml::Class-»
	«FOREACH allParents() AS e-»
	 «EXPAND genPropertyRec(createRangeDeclarations) FOREACH e.getAllAttributes().select(a|a.isSearchable()  ) -»
	«ENDFOREACH»
	«EXPAND genPropertyRec(createRangeDeclarations) FOREACH getAllAttributes().select(a|a.isSearchable()  ) -»
«ENDDEFINE»

«DEFINE genPropertyRec(boolean createRangeDeclarations)  FOR uml::Property-»
	«IF isExpandableAssoc() -» 
		«setCurrentEmbeddable()-» 
		«EXPAND genPropertyRec(createRangeDeclarations) FOREACH type.getAllAttributes().select(a|a.isSearchable()  ) -»
		«clearCurrentEmbeddable()-»
	«ELSE-»
		«EXPAND genAttribute(createRangeDeclarations) -»
	«ENDIF»
«ENDDEFINE»


«DEFINE genManyToManySearch FOR uml::Property»
		private «type.fqn()» «name»ToSearch;
   		
   		public void set«name.toFirstUpper()»ToSearch(«type.fqn()» «type.asVar()»ToSearch){
   			this.«name»ToSearch = «type.asVar()»ToSearch;
   		}
   		
   		public «type.fqn()» get«name.toFirstUpper()»ToSearch(){
   			return «name»ToSearch;
   		}
«ENDDEFINE»


«DEFINE genAttribute(boolean createRangeDeclarations) FOR uml::Property -»
	«EXPAND genProperty(createRangeDeclarations) FOR this-»
«ENDDEFINE»

«DEFINE genProperty(boolean createRangeDeclarations) FOR uml::Property-»
	«IF createRangeDeclarations == true »
	«IF this.type.isRangeType()»
		private Range<«type.name.getTypeName()»> «getIdWithoutPrefix()»Range = new Range<«type.name.getTypeName()»>();
		
		public Range<«type.name.getTypeName()»> get«getIdWithoutPrefix().toFirstUpper()»Range(){
			return «getIdWithoutPrefix()»Range;
		}
		public void  set«getIdWithoutPrefix().toFirstUpper()»(Range<«type.name.getTypeName()»> «getIdWithoutPrefix()»Range ){
			this.«getIdWithoutPrefix()»Range = «getIdWithoutPrefix()»Range;
		}
	«ENDIF»	
	«ELSE»
		«EXPAND genPropertyRestrictions»
	«ENDIF»
«ENDDEFINE»

«DEFINE genPropertyRestrictions FOR uml::Property»

	«IF this.isString()-»
	  "lower(«genPropertyLabel()») like concat(lower(#{«getCurrentEntity().asVar()»List.«genPropertyLabel()»}),'%')",
	«ELSEIF this.type.isRangeType()»
		"«genPropertyLabel()» >= #{«getCurrentEntity().asVar()»List.«getIdWithoutPrefix()»Range.begin}",
		"«genPropertyLabel()» <= #{«getCurrentEntity().asVar()»List.«getIdWithoutPrefix()»Range.end}",			
	«ELSE»
	   «IF isManyToMany() »
	   	«IF getCurrentEmbeddable() == null»
	   		"#{«getCurrentEntity().asVar()»List.«name»ToSearch} in elements(«genPropertyLabel()»)",
	   	«ENDIF»
	   «ELSE»
	  	"«genPropertyLabel()»«association != null ? ".id" : "" » = #{«getCurrentEntity().asVar()»List.«genPropertyLabel()»«association != null ? ".id" : "" »}",
	  	«ENDIF»
	«ENDIF»

«ENDDEFINE»

«REM» comment
«DEFINE genAssociation(boolean createRangeDeclarations) FOR uml::Property-»	
«IF !createRangeDeclarations»

 «IF isManyToMany()»
 	"#{«getCurrentEntity().asVar()»List.«type.asVar()»ToSearch} in elements(«genPropertyLabel()».«name»)"
 «ELSE»
 	"«genPropertyLabel()».id = #{«getCurrentEntity().asVar()»List.«genPropertyLabel()».id}",
 «ENDIF»
 
«ENDIF»   
«ENDDEFINE»
«ENDREM»

«DEFINE genProperty(boolean createRangeDeclarations) FOR uml::Enumeration-»	
«IF !createRangeDeclarations»
" «genPropertyLabel()» = #{«getCurrentEntity().asVar()»List.«genPropertyLabel()»})",
«ENDIF»
 
«ENDDEFINE»


«DEFINE genImports FOR wcprofile::Entity»

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;
import org.jboss.seam.framework.EntityQuery;
import org.witchcraft.base.entity.BaseQuery;
import org.witchcraft.base.entity.Range;

import org.jboss.seam.annotations.Observer;

import java.math.BigDecimal;

import org.jboss.seam.annotations.security.Restrict;

import org.jboss.seam.annotations.In;
	
«ENDDEFINE»
