«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»


«DEFINE genView FOR uml::Class»
	«clearCurrentEmbeddable()-»
	«setCurrentEditMode(false)» 
	«EXPAND genViewFile»
	«EXPAND genViewComponent»
«ENDDEFINE»

«DEFINE genViewFile FOR uml::Class»
	«FILE getWebPath() +"/" + "view" + name + "." + getExtension()»
<ui:composition «EXPAND WebRoot::genIncludes-» template = "«getAdminTemplate()»" >	
	<ui:define name="content">
	
	<f:metadata>
		<f:viewParam name="id" value="#{«getAction()».id}"/>
		<f:event type="preRenderView" listener="#{«getAction()».retrieve}"/>
	</f:metadata>
	
		<h:form>
			«REM»comment
			 «PROTECT CSTART '<!--' CEND '-->' ID  'EDITABLE_RGN_VIEW_' + package.name + "_" + (isCurrentTemplateMode()?"Template_":"") + name»			
			«ENDPROTECT»	
			«ENDREM»
			<p:tabView switchType="ajax">
				<p:tab title="«name»">
					<ui:include src = "«getComponentViewFile(customViewComponents ?"customView":"view")»" />
					«EXPAND genCancelSaveBtns FOR this»
				</p:tab>
			«FOREACH getOutgoingAssociations() AS a ITERATOR iter»
				<p:tab title="«a.name.toFirstUpper()»"  rendered="#{«getAction()».«name.toFirstLower()».«a.name» != null}">
					<ui:include src = "«a.type.getComponentViewFile("view")»" >
						«REM»comment<ui:param name="entityId" value="«getRandomNumber()»" />«ENDREM»
						<ui:param name="entityId" value="«iter.counter1»" />
						<ui:param name="«a.type.name.toFirstLower()»Id" value="#{«getAction()».«name.toFirstLower()».«a.name».id}" />
					</ui:include>
				</p:tab>
			«ENDFOREACH»	
			</p:tabView>
			«EXPAND genBusinessFunctionButtons FOR this»
		</h:form>
		<br/>
			
			<p:tabView  switchType="client" >
			«FOREACH getNonComposedManyAssociations() AS a»
			<p:tab title="«a.name.toFirstUpper()»" icon="/images/icons/bricks.png">
				<c:set var="modalId" value="«name»ModalPanel-«a.name»" />
				<ui:include src = "«a.type.getComponentViewFile("list")»" >
					<ui:param name="records" value="#{«a.type.asVar()»List.get«a.name.toFirstUpper()»By«a.opposite.name.toFirstUpper()»(«getAction()».«name.toFirstLower()»)}" />
         			<ui:param name="modalId" value="${modalId}" />
         		</ui:include>
         		<h:form> 
		      		<s:button value="Create New" view="«a.type.getViewFile("edit")»" > 
		      			<f:param name="«name.toFirstLower()»Id" value="#{«getAction()».«name.toFirstLower()».id}" />
		      		    <f:param name="«a.type.name.toFirstLower()»Id" value="0"/> 
		      		</s:button>
		      		  <a:button oncomplete="Richfaces.showModalPanel('${modalId}',{});" value="Quick Create"  reRender="${modalId}" >
			            <a:actionparam name="«a.type.name.toFirstLower()»Id" assignTo="#{«a.type.name.toFirstLower()»Action.«a.type.name.toFirstLower()»Id}" value="0"  />
			         	<a:actionparam name="«name.toFirstLower()»Id" assignTo="#{«a.type.name.toFirstLower()»Action.«a.opposite.name»Id}" 
			         		value="#{«name.toFirstLower()»Action.«name.toFirstLower()».id}"  />
			         </a:button>
		    	</h:form>
		    	<ui:include src="«a.type.getComponentViewFile("modalDlg")»" > 
		    		<ui:param name="modalId" value="${modalId}" />
		    	</ui:include>
			</p:tab>
			«ENDFOREACH»
			</p:tabView>
		<br/>
		
		<p:tabView switchType="client">
			<p:tab title="Notes">
				<wc:comments backingAction="#{«getAction()»}"/>
			</p:tab>
			«IF getAuditable()-»
			<p:tab title="Audit">
				<ui:include
					src="«getComponentViewFile("auditList")»" />
			</p:tab>
			«ENDIF»
		</p:tabView>
		
		
		«EXPAND generateWebFunctionIncludes FOR this»
		
	</ui:define> 
</ui:composition>
	«ENDFILE»
«ENDDEFINE»



«DEFINE genViewComponent FOR uml::Class»
«FILE getWebPath() +"/" + "view" + name+ "Component22." + getExtension()»
<ui:composition «EXPAND WebRoot::genIncludes-» >	
	
	<h:panelGroup  id="«"edit"»«name»ComponentPanel" >
		
		«setAsCurrentEntity(this)-»
		<h:panelGrid columns="1" onload="#{«getAction()».load(«asVar()»Id )  }"></h:panelGrid>
		
		«EXPAND genAttribAsOutput FOR this-»
		<br/>
		«EXPAND genTable FOR this-»
		<br/>
		«EXPAND genManyToManyShuttle FOR this-»
	
	</h:panelGroup>
	
</ui:composition>
«ENDFILE»
«ENDDEFINE»





«DEFINE genCancelSaveBtns FOR uml::Class»
	<div class="buttonBox">
		<h:button value="Edit"
			outcome="edit«name»" includeViewParams="true">
		</h:button>
		
		<h:button value="Back To Listing"
			outcome="list«name»" />
	</div>		
«ENDDEFINE»


«DEFINE genBusinessFunctionButtons FOR uml::Class»
	<div class="buttonBox">
		«FOREACH getAllOperations() AS o»
		«IF o.hasStereo("UserOperation") »
			«IF o.hasUI»
			
			<a:button value="«o.name»"  rendered="#{s:hasPermission('«asVar()»', '«o.name»', «getAction()».«name.toFirstLower()»)  and  «getAction()».«o.name»Allowed }" 
				oncomplete="Richfaces.showModalPanel('«o.name»«name.toFirstUpper()»Mdl',{});"  />
	
			«ELSE»
			<h:button value="«o.name»"  rendered="#{s:hasPermission('«asVar()»', '«o.name»', «getAction()».«name.toFirstLower()») and  «getAction()».«o.name»Allowed}" 
					action="#{«getAction()».«o.name»}" />
			«ENDIF»
		«ENDIF»
		«ENDFOREACH»
	</div>
«ENDDEFINE»


«DEFINE generateWebFunctionIncludes FOR wcprofile::Entity»
	«FOREACH getAllOperations() AS o»
		«IF o.hasStereo("UserOperation") && o.hasUI»
		<ui:include src="«getComponentViewFile("modalDlg" + o.name.toFirstUpper())»" >
				<ui:param name="modalId" value="«o.name»«name.toFirstUpper()»Mdl" />
		</ui:include>
		«EXPAND webFunctionModelDlg::gen(o) FOR this » 
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE genAttribAsOutput FOR uml::Class-»
	«IF !isCurrentMultiMode()»
	«IF getCurrentEmbeddable() == null»«EXPAND panelBegin FOR this»«ENDIF»
	«FOREACH allParents() AS e-»
	«EXPAND genLabelAndOutput FOREACH e.getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
	«ENDFOREACH»
	«EXPAND genLabelAndOutput FOREACH getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
	«ENDIF»
	
	«FOREACH allParents() AS e-»
	 «EXPAND genAttributeAssoc FOREACH e.getAllAttributes().select(a| !a.isMultivalued() && a.association != null && !a.isExpandableAssoc()) -»
	«ENDFOREACH»
	«EXPAND genAttributeAssoc FOREACH getAllAttributes().select(a| !a.isMultivalued() && a.association != null && !a.isExpandableAssoc() ) -»
	«IF getCurrentEmbeddable() == null»«EXPAND panelEnd FOR this»«ENDIF»
 «REM»expand the contained associations e.g contactDetails«ENDREM»
	«FOREACH allParents() AS e-»
		 «EXPAND genAttributeAssoc FOREACH e.getAllAttributes().select(a| !a.isMultivalued() && a.association != null && a.isExpandableAssoc()) -»
	«ENDFOREACH»
	«EXPAND genAttributeAssoc FOREACH getAllAttributes().select(a| !a.isMultivalued() && a.association != null && a.isExpandableAssoc() ) -»
	
	
	«IF isCurrentMultiMode()»
	«IF getCurrentEmbeddable() == null»«EXPAND panelBegin FOR this»«ENDIF»
	«FOREACH allParents() AS e-»
	«EXPAND genLabelAndOutput FOREACH e.getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
	«ENDFOREACH»
	«EXPAND genLabelAndOutput FOREACH getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
	«ENDIF»
	
«ENDDEFINE»

«REM»For multivalued attributes e.g. an order's order items«ENDREM»
«DEFINE genTable FOR uml::Class»
	«FOREACH allParents() AS e-»
		«EXPAND gentEditableTable FOREACH e.getComposed() -»
	«ENDFOREACH»
«ENDDEFINE»


«DEFINE genManyToManyShuttle FOR uml::Class»
	«FOREACH allParents() AS e-»
		«EXPAND genEditManyToManyShuttle FOREACH e.getLeadingManyToMany() -»
	«ENDFOREACH»
	«EXPAND genEditManyToManyShuttle FOREACH getLeadingManyToMany() -»
«ENDDEFINE»

«DEFINE genEditManyToManyShuttle FOR uml::Property»
	<br/>
	«IF isCurrentEditMode()»
	<p:simpleTogglePanel label="«msgBundleKey()»" switchType="client"  id="«name»">
		<p:listShuttle sourceValue="#{«class.getAction()».listAvailable«name.toFirstUpper()»}" 
			targetValue="#{«class.getAction()».list«name.toFirstUpper()»}" var="item" >
	        <s:convertEntity />
	        <p:column> #{item.displayName} </p:column>
	     </p:listShuttle>
    </p:simpleTogglePanel>
	«ELSE»
	<p:simpleTogglePanel label="«msgBundleKey()»" switchType="client"  >
        <p:dataTable value="#{«class.getAction()».list«name.toFirstUpper()»}" var="item" >
        	<p:column> #{item.displayName} </p:column>
     	</p:dataTable>
     </p:simpleTogglePanel>
	«ENDIF»
«ENDDEFINE»




«DEFINE genAttributeAssoc FOR uml::Property -»
	«IF opposite.type.name != getCurrentEntity().name || !isCurrentMultiMode() »
		«IF isExpandableAssoc()  -»
			«IF getCurrentEmbeddable() == null» «EXPAND panelBegin FOR this.type» «ENDIF»
			«setCurrentEmbeddable()»
			«EXPAND genAttribAsOutput FOR this.type-»
			«clearCurrentEmbeddable()-»
			«EXPAND panelEnd FOR this.type»
		«ELSE»
			«clearCurrentEmbeddable()»
			«EXPAND genLabelAndOutput FOR this-»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»




«DEFINE genLabelAndOutput FOR uml::Property-»
	«IF !isSecret()  »
		
		«isCurrentMultiMode()?"<h:column><f:facet name=\"header\">":""»
		«getOutputMessage()-»
		«isCurrentMultiMode()?"</f:facet>":""»
		
		«IF association != null»
			«EXPAND genAssociation-»
		«ELSE»
			«EXPAND genPropertyEntry(type) FOR this-»
		«ENDIF»
		
		«getErrorMessageHolder()-»
		«isCurrentMultiMode()?"</h:column>":""»
	«ENDIF»
«ENDDEFINE»




«DEFINE genAssociation FOR uml::Property -»
	«EXPAND genAssocLink FOR this»
«ENDDEFINE»


«DEFINE panelBegin FOR uml::Class»
	«IF !isCurrentMultiMode()»
		<c:if test="${numColumns == null }" > <c:set var="numColumns" value="2" /> </c:if>
  		<h:panelGrid columns="${numColumns}" styleClass="«isCurrentEditMode()?"edit":"view"»Info" columnClasses="leftCol, rightCol"   rendered="#{ hidePanel«name» eq null}" >
  		<f:facet name="header"> 
			<h:outputText value="#{msg.«name»}"/> 
  		</f:facet>
  	«ENDIF»
«ENDDEFINE»

«DEFINE panelEnd FOR uml::Class»
	«IF !isCurrentMultiMode()»
		</h:panelGrid>
	«ENDIF»
«ENDDEFINE»

«DEFINE genAssocLink FOR uml::Property»
	<h:link «getEscape()»  value="#{«getActionForMode()»«genPropertyLabel()».displayName}"  
			action="view«name»" propagation="none">
			<f:param name="«name»Id" value="#{«getActionForMode()»«genPropertyLabel()».id}" />
			<f:param name="from" value="#{request.servletPath}" />
			«IF type.popupInfo != null»
			 <p:toolTip>
	            <span>
	              #{«getActionForMode()»«genPropertyLabel()».popupInfo} 
	            </span>
	        </p:toolTip>
	        «ENDIF»
	</h:link>
«ENDDEFINE»



«REM»Generate text control for the given property «ENDREM»
«DEFINE genPropertyEntry(uml::PrimitiveType cls) FOR uml::Property-»
	<h:outputText id="«getId()»"  value="#{«getActionForMode()»«genPropertyLabel()»}"  />
«ENDDEFINE»

«DEFINE genPropertyEntry(uml::Enumeration enm) FOR uml::Property-»
	<h:outputText id="«getId()»"  value="#{«getActionForMode()»«genPropertyLabel()»}"  />
«ENDDEFINE»


«DEFINE getFileView FOR uml::Property»
«LET isCurrentMultiMode()?"_" + getCurrentEntity().asVar() + "." + name: getFieldNameWithAction() AS currentFile»
	<c:choose>
		<c:when test="${«currentFile».contentType.startsWith('image')}">
			<s:graphicImage value="#{«currentFile».data}" />
		</c:when>
		<c:otherwise>
			<h:link value="#{«currentFile».name}"  action="#{«class.getAction()».download«name.toFirstUpper()»(null)}" propagation="none" >
				<f:param name="currentEntityId" value="#{«class.getAction()».«name.toFirstLower()».id}" />
			</h:link>
		</c:otherwise>
	</c:choose>
«ENDLET»
«ENDDEFINE»

«DEFINE genFilePropertyEntry FOR uml::Property-»
	«IF isCurrentEditMode() » 
     <h:panelGroup  rendered="#{«genEditPermission()»}"> 
          <h:outputText value="Current File:" /> <h:link value="#{«getActionForFileMode()»«class.asVar()-».«name».name}" id="«name»_file" 
          	action="#{«getActionForFileMode()»downloadFile(null)}" propagation="none"> 
              <f:param name="currentEntityId" value="#{«getActionForFileMode()»«name.toFirstLower()».id}" /> 
            </h:link> 
        <p:fileUpload fileUploadListener="#{«getActionForFileMode()»«name»UploadListener}"  immediateUpload="true" ajaxSingle="true" 
        	autoclear="false"  listHeight="30" listWidth="250"> 	
        	<s:conversationPropagation type="join" />
        	 <a:support event="onuploadcomplete" reRender="«name»_file" />
        </p:fileUpload>
     </h:panelGroup>
    «ELSE» 
		«EXPAND getFileView » 
	«ENDIF»
«ENDDEFINE»





«DEFINE genProperty FOR String-»
	<h:outputText value="«msgBundleKey()-»" />
	<h:outputText value="#{«getCurrentEntity().asVar()».«this»«this == "createdByUser"?".displayName":""»}" />
«ENDDEFINE»


