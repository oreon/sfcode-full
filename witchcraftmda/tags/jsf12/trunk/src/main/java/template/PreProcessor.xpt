«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»

«DEFINE Root FOR uml::Model»
	«REM» Massage the model «ENDREM»
	«setCurrentModel()»
	«EXPAND setDefaultNamesForAssocs FOREACH allOwnedElements().typeSelect(uml::Property) »
	
	«EXPAND setDefaultMultiplicityForAssocs FOREACH allOwnedElements().typeSelect(uml::Property) »
	«EXPAND applyEntityStereotype FOREACH allOwnedElements().typeSelect(wcprofile::EntitiesPackage) »
	«EXPAND applyViewStateStereotype FOREACH allOwnedElements().typeSelect(wcprofile::ViewStateMachine) »
	«EXPAND massageEmbeddables FOREACH allOwnedElements().typeSelect(wcprofile::Embeddable) »
	
	
	«EXPAND applyRequired(this) FOREACH allOwnedElements().typeSelect(wcprofile::AbstractEntity)»

«ENDDEFINE»

«REM» For associations we need to
 set name to type name if the name is null ;«ENDREM»
«DEFINE setDefaultMultiplicityForAssocs FOR uml::Property»
«ENDDEFINE»


«DEFINE applyRequired(uml::Model model) FOR wcprofile::AbstractEntity»
	«IF readPropertyDef("allFieldsMandatory","false") == "true"»
		«EXPAND ApplyColumnStereotype(model) FOREACH getAllAttributes()»
		«EXPAND setRequired(model) FOREACH getAllAttributes()»
	«ENDIF»
«ENDDEFINE»

«DEFINE setDefaultNamesForAssocs FOR uml::Property»

	«IF association != null»
		«IF !(name != null && name.length > 0 )»
			«LET type.name.toFirstLower() AS defaultName»
				«IF isMultivalued()» «REM» For collections we need to create a plural default type name«ENDREM»
					«setName(defaultName.getPlural())»
				«ELSE»
					«setName(defaultName)»
				«ENDIF»		
			«ENDLET»
		«ENDIF»
			
		«IF !(opposite.name != null && opposite.name.length > 0 )»
			«LET class.name.toFirstLower() AS defaultName»
				«IF opposite!= null && opposite.isMultivalued()» 
					«opposite.setName(defaultName.getPlural())»
				«ELSE»
					«opposite.setName(defaultName)»
				«ENDIF»	 
			«ENDLET»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

<!-- Make all fields notnull  -->
«DEFINE ApplyColumnStereotype(uml::Model model) FOR uml::Property»
   «IF !( type.name == "nameType"  || type.name == "uniqueNameType"  || type.name == "Boolean") »
	«FOREACH model.getAppliedProfile("wcprofile").ownedStereotype AS s»
			«IF s.name == "Column"» «this.applyStereotype(s)»   «ENDIF»
	«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE ApplyColumnStereotype(uml::Model model) FOR wcprofile::Column»
«ENDDEFINE»

«DEFINE setRequired(uml::Model model) FOR wcprofile::Column»
	«IF notNull == null»
		«this.setValue(getAppliedStereotype("wcprofile::Column"),"notNull", true )»
	«ENDIF»
«ENDDEFINE»

«DEFINE setRequired(uml::Model model) FOR uml::Property»
  «IF !( type.name == "nameType"  || type.name == "uniqueNameType" || type.name == "Boolean") »
	«this.setValue(getAppliedStereotype("wcprofile::Column"),"notNull", true )»
  «ENDIF»
«ENDDEFINE»



«REM» For classes in entitiespackage we need to default to 'Enity' profile if no sterotype is specified «ENDREM»
«DEFINE applyEntityStereotype FOR wcprofile::EntitiesPackage»
	«FOREACH allOwnedElements().typeSelect(uml::Class) AS c»
		«IF c.getStereotypeApplications().isEmpty && c.owningTemplateParameter == null »
			«c.applyEntityStereoType()»
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»


«DEFINE applyViewStateStereotype FOR wcprofile::ViewStateMachine»
	«FOREACH allOwnedElements().typeSelect(uml::State) AS c»
		«IF c.getStereotypeApplications().isEmpty  »
			«c.applyStereotype("wcprofile::ViewState")»
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»

«REM»todo add interface serializable «ENDREM»
«DEFINE massageEmbeddables FOR wcprofile::Embeddable»
«ENDDEFINE»

«DEFINE massageTasks FOR uml::ActiviyNode»
	«setName(getTaskMassagedName()) »
«ENDDEFINE»

«DEFINE massageTasks FOR uml::InitialNode»
	«setName(getTaskMassagedName()) »
«ENDDEFINE»

«DEFINE massageTasks FOR uml::ActivityPartition»
	«setName(getTaskMassagedName()) »
«ENDDEFINE»

«DEFINE massageTasks FOR uml::CallBehaviorAction»
	«getTaskMassagedName()»
«ENDDEFINE»

«DEFINE massageTasks FOR uml::DecisionNode»
	«setName(getTaskMassagedName()) »
«ENDDEFINE»

«DEFINE massageTasks FOR uml::ForkNode»
	«setName(getTaskMassagedName()) »
«ENDDEFINE»


«DEFINE massageTasks FOR uml::FlowFinalNode»
	«setName(getTaskMassagedName()) »
«ENDDEFINE»

«DEFINE massageTasks FOR uml::ActivityFinalNode»
	«setName(getTaskMassagedName()) »
«ENDDEFINE»

«DEFINE massageTasks FOR uml::CentralBufferNode»
	«setName(getTaskMassagedName()) »
«ENDDEFINE»



«DEFINE massageEdges FOR uml::ControlFlow»
	«IF (name == null || name == "") &&( guard.stringValue() == null || guard.stringValue() == "") »
		«setName("proceedTo" + target.getTaskMassagedName().toFirstUpper())»
	«ELSE»	
		«this.setName(getTaskMassagedName()) »
	«ENDIF»
«ENDDEFINE»

«DEFINE massageEdges FOR uml::ActivityFinal»
	«IF name == null»
		«setName("next")»
	«ENDIF»
«ENDDEFINE»
