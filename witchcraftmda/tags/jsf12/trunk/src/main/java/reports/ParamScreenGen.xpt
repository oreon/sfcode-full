«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»
«EXTENSION reports::ReportExt»

«DEFINE genReportsAction FOR wcprofile::Report»

«FILE getWebPackagePath("Action")   »
package « getWebPackageName() »;

import org.witchcraft.jasperreports.BaseReportAction;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.apache.commons.beanutils.PropertyUtils;

«IF getCartridge() == "RICH"»
import org.jboss.seam.annotations.Name;
«ELSE»
import javax.inject.Named;
«ENDIF»



import org.witchcraft.jasperreports.BaseReportAction;

import java.util.Date;
import org.witchcraft.utils.DateUtils;

import «getTopLevelPackage()».ProjectUtils;

«IF hasCollections» import «fqn()»;«ENDIF»

«IF getCartridge() == "RICH"»
@Name("«getAction()»")
«ELSE»
@Named
«ENDIF»
public class «name»Action extends BaseReportAction {

 «FOREACH allOwnedElements().typeSelect(wcprofile::ReportParameter) AS param»
 	«param.type.fqn()» «param.name»  «IF param.defaultValue != null» =  «param.defaultValue» «ENDIF»;
 «ENDFOREACH»
 
 «FOREACH allOwnedElements().typeSelect(wcprofile::ReportParameter) AS param»
 	«EXPAND template::Root::genGetterSetter FOR param»
 «ENDFOREACH»
 
 
	@SuppressWarnings("unchecked")
	@Override
	public void updateParameters(Map map) {
		«FOREACH allOwnedElements().typeSelect(wcprofile::ReportParameter) AS param»
 			«IF param.expression != null && param.expression != "\"\"" »
 				if(«param.name» != null)
 					map.put("«param.name»", «param.name».«param.expression» + "");
 			«ELSE»
 				map.put("«param.name»", «param.name»);
 			«ENDIF»
 		«ENDFOREACH»
	}
	
	«IF hasCollections»
	@Override
	public JRBeanCollectionDataSource createBeansList() {
		
		String qry = "«query»";
		List<Object[]> results = getEntityManager().createQuery(qry).getResultList();
		List<«name»> lst«name»s = new ArrayList<«name»>();
		
		for (Object[] objects : results) {
			«name» «name» = new «name»();
			Field[] flds = «name».getClass().getDeclaredFields();
			
			for (int i = 0; i < objects.length; i++) {
				try {
					PropertyUtils.setProperty(«name», flds[i].getName(), objects[i]);
				} catch (Exception e) {
					log.warn("Error setting property " + flds[i].getName()  + " " + e.getMessage());
				} 
			}
			lst«name»s.add(«name»);
		}
		
		JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(lst«name»s);
		return jrBeanCollectionDataSource;
	}
	«ENDIF»
 
}
«ENDFILE»

«ENDDEFINE»





«DEFINE genParamScreen FOR wcprofile::Report»
«FILE getReportsRoot() + "/" + name.toFirstLower() + ".xhtml" -»
<ui:composition «EXPAND richfaces::WebRoot::genIncludes-»
	template = "/admin/reports/template.xhtml" >	
	<ui:define name="content">
	<h:form>
	<s:validateAll>
	<h:panelGrid  columns="3" styleClass="viewInfo" columnClasses="leftCol, rightCol"  >
		<f:facet name="header">
			<h:outputText value="«name»" />
		</f:facet>
	«FOREACH allOwnedElements().typeSelect(wcprofile::ReportParameter) AS param»
		«EXPAND genLabelAndInput FOR param»
	«ENDFOREACH»
	</h:panelGrid>
	</s:validateAll>
	<h:commandButton propagation="none" value="Run Report as PDF"
				action="#{«name.toFirstLower()»Action.runReport('«name»', 'PDF')}" />
	<h:commandButton propagation="none" value="Run Report as HTML"
				action="#{«name.toFirstLower()»Action.runReport('«name»', 'HTML')}" />			
	</h:form>
	</ui:define>
</ui:composition>
«ENDFILE»
«ENDDEFINE»


«DEFINE genLabelAndInput FOR wcprofile::ReportParameter-»
		<h:panelGroup> «getOutputMessage()» «optionalExpression == null ? "*" : "" » </h:panelGroup>
		«EXPAND genPropertyEntry(type) FOR this-»
		«getErrorMessage()-»
«ENDDEFINE»


«DEFINE genPropertyEntry(uml::PrimitiveType cls) FOR uml::Property-»
<«getInputControl()»  id="«getId()»"  label="«msgBundleKey()»"  required="true"  value="#{«class.name.toFirstLower()»Action.«name»}" />
«ENDDEFINE»

«DEFINE genPropertyEntry(uml::Class cls) FOR uml::Property-»
	<h:selectOneMenu id="«getId()»"   label="«msgBundleKey()»" value="#{«class.name.toFirstLower()»Action.«name»}"  
		required="«optionalExpression != null ? "false":"true" »">
		<s:selectItems value="#{«type.name.toFirstLower()»List}" var="itemIter"
			label="#{itemIter.displayName}"
			noSelectionLabel="Please Select..." />
		<s:convertEntity />
	</h:selectOneMenu>
«ENDDEFINE»

«DEFINE genPropertyEntry(uml::Enumeration enm) FOR uml::Property-»
	<h:selectOneMenu id="«getId()»"  value="#{«class.name.toFirstLower()»Action.«name»}" 
		required="«getAssocOptional() && !isCurrentTemplateMode()»" 
	  label="«msgBundleKey()»">
		<f:selectItem itemLabel="Please Select..." itemValue="" />
		«FOREACH  enm.ownedLiteral AS e-»
		<f:selectItem itemValue="«e.name»"  itemLabel="#{msg.«e.name-»}" />
		«ENDFOREACH»
		«genAjaxValidator()»
	</h:selectOneMenu>
«ENDDEFINE»