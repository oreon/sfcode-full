/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-primefaces-sd:src/main/java/converter/GenericJsfConverter.p.vm.java
 */
package com.company.demo.web.converter;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.binding.convert.ConversionService;

import org.springframework.data.domain.Persistable;
import org.springframework.data.repository.CrudRepository;

/**
 * Base JSF converter for JPA entities.
 */
public class GenericJsfConverter<E extends Persistable<PK>, PK extends Serializable> implements Converter {
    private Class<?> pkType = (Class<?>) ((ParameterizedType) getClass().getGenericSuperclass())
            .getActualTypeArguments()[1];

    @Autowired
    protected ConversionService conversionService;
    protected CrudRepository<E, PK> crudRepository;

    protected GenericJsfConverter(CrudRepository<E, PK> crudRepository) {
        this.crudRepository = crudRepository;
    }

    @SuppressWarnings("unchecked")
    public Object getAsObject(FacesContext context, UIComponent component, String value) throws ConverterException {
        if (value == null || "-1".equals(value)) {
            return null;
        }

        PK id = (PK) conversionService.executeConversion(value, pkType);
        return id == null ? null : crudRepository.findOne(id);
    }

    @SuppressWarnings("unchecked")
    public String getAsString(FacesContext context, UIComponent component, Object object) {
        if (object == null || !Persistable.class.isAssignableFrom(object.getClass())) {
            return "-1";
        }
        return ((Persistable<PK>) object).getId().toString();
    }

    /**
     * Execute the printExpression using the passed entity as root object.
     */
    public String print(E entity) {
        return entity == null ? "" : entity.getId().toString();
    }
}
