package com.oreon.cerebrum.prescription;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;

import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.witchcraft.base.entity.BaseEntity;

//Impl 

/**
 * This file is generated by Witchcraftmda.
 * DO NOT MODIFY any changes will be overwritten with the next run of the code generator.
 *
 */

/**
 * 
 *
 */

@MappedSuperclass
public class PrescriptionItemBase extends BaseEntity {
	private static final long serialVersionUID = 1881253755L;

	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	@JoinColumn(name = "drug_id", nullable = false, updatable = true)
	protected com.oreon.cerebrum.drugs.Drug drug = new com.oreon.cerebrum.drugs.Drug();

	@NotNull
	@Column(name = "qty", unique = false)
	protected Double qty = 1.0

	;

	@NotNull
	@Column(name = "strength", unique = false)
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String strength

	;

	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	@JoinColumn(name = "prescription_id", nullable = false, updatable = true)
	protected Prescription prescription

	;

	@Column(unique = false)
	protected Route route = com.oreon.cerebrum.prescription.Route.PO

	;

	@NotNull
	@Column(name = "duration", unique = false)
	protected Integer duration

	;

	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	@JoinColumn(name = "frequency_id", nullable = false, updatable = true)
	protected Frequency frequency

	;

	@Column(unique = false)
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String remarks

	;

	@Column(unique = false)
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String brandName

	;

	public void setDrug(com.oreon.cerebrum.drugs.Drug drug) {
		this.drug = drug;
	}

	public com.oreon.cerebrum.drugs.Drug getDrug() {

		return drug;

	}

	public void setQty(Double qty) {
		this.qty = qty;
	}

	public Double getQty() {

		return qty;

	}

	public void setStrength(String strength) {
		this.strength = strength;
	}

	public String getStrength() {

		return strength;

	}

	public void setPrescription(Prescription prescription) {
		this.prescription = prescription;
	}

	public Prescription getPrescription() {

		return prescription;

	}

	public void setRoute(Route route) {
		this.route = route;
	}

	public Route getRoute() {

		return route;

	}

	public void setDuration(Integer duration) {
		this.duration = duration;
	}

	public Integer getDuration() {

		return duration;

	}

	public void setFrequency(Frequency frequency) {
		this.frequency = frequency;
	}

	public Frequency getFrequency() {

		return frequency;

	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	public String getRemarks() {

		return remarks;

	}

	public void setBrandName(String brandName) {
		this.brandName = brandName;
	}

	public String getBrandName() {

		return brandName;

	}

	@Transient
	public String getDisplayName() {
		try {
			return strength;
		} catch (Exception e) {
			return "Exception - " + e.getMessage();
		}
	}

	//Empty setter , needed for richfaces autocomplete to work 
	public void setDisplayName(String name) {
	}

	/** This method is used by hibernate full text search - override to add additional fields
	 * @see org.witchcraft.model.support.BaseEntity#retrieveSearchableFieldsArray()
	 */
	@Override
	public List<String> listSearchableFields() {
		List<String> listSearchableFields = new ArrayList<String>();
		listSearchableFields.addAll(super.listSearchableFields());

		listSearchableFields.add("strength");

		listSearchableFields.add("remarks");

		listSearchableFields.add("brandName");

		return listSearchableFields;
	}

	@Field(index = Index.YES, name = "searchData")
	@Analyzer(definition = "entityAnalyzer")
	public String getSearchData() {
		StringBuilder builder = new StringBuilder();

		builder.append(getStrength() + " ");

		builder.append(getRemarks() + " ");

		builder.append(getBrandName() + " ");

		if (getDrug() != null)
			builder.append("drug:" + getDrug().getDisplayName() + " ");

		if (getPrescription() != null)
			builder.append("prescription:" + getPrescription().getDisplayName()
					+ " ");

		if (getFrequency() != null)
			builder
					.append("frequency:" + getFrequency().getDisplayName()
							+ " ");

		return builder.toString();
	}

	/*
	<param name="drugId" value="#{drugId}" />
	<param name="prescriptionId" value="#{prescriptionId}" />
	<param name="frequencyId" value="#{frequencyId}" />
	
	 */

}
