package com.oreon.cerebrum.encounter;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import javax.persistence.Transient;

import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.witchcraft.base.entity.BaseEntity;

//Impl 

/**
 * This file is generated by Witchcraftmda.
 * DO NOT MODIFY any changes will be overwritten with the next run of the code generator.
 *
 */

/**
 * 
 *
 */

@MappedSuperclass
public class PrescribedTestBase extends BaseEntity {
	private static final long serialVersionUID = -1220063154L;

	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	@JoinColumn(name = "dxTest_id", nullable = false, updatable = true)
	protected com.oreon.cerebrum.ddx.DxTest dxTest

	;

	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	@JoinColumn(name = "encounter_id", nullable = false, updatable = true)
	protected Encounter encounter

	;

	@Column(unique = false)
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String remarks

	;

	@IndexedEmbedded
	@AttributeOverrides({

			@AttributeOverride(name = "results", column = @Column(name = "testResults_results")),

			@AttributeOverride(name = "document", column = @Column(name = "testResults_document"))

	})
	protected TestResults testResults = new TestResults();

	public void setDxTest(com.oreon.cerebrum.ddx.DxTest dxTest) {
		this.dxTest = dxTest;
	}

	public com.oreon.cerebrum.ddx.DxTest getDxTest() {

		return dxTest;

	}

	public void setEncounter(Encounter encounter) {
		this.encounter = encounter;
	}

	public Encounter getEncounter() {

		return encounter;

	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	public String getRemarks() {

		return remarks;

	}

	public void setTestResults(TestResults testResults) {
		this.testResults = testResults;
	}

	public TestResults getTestResults() {

		if (testResults == null)
			testResults = new com.oreon.cerebrum.encounter.TestResults();
		return testResults;

	}

	@Transient
	public String getDisplayName() {
		try {
			return remarks;
		} catch (Exception e) {
			return "Exception - " + e.getMessage();
		}
	}

	//Empty setter , needed for richfaces autocomplete to work 
	public void setDisplayName(String name) {
	}

	/** This method is used by hibernate full text search - override to add additional fields
	 * @see org.witchcraft.model.support.BaseEntity#retrieveSearchableFieldsArray()
	 */
	@Override
	public List<String> listSearchableFields() {
		List<String> listSearchableFields = new ArrayList<String>();
		listSearchableFields.addAll(super.listSearchableFields());

		listSearchableFields.add("remarks");

		listSearchableFields.add("testResults.results");

		return listSearchableFields;
	}

	@Field(index = Index.YES, name = "searchData")
	@Analyzer(definition = "entityAnalyzer")
	public String getSearchData() {
		StringBuilder builder = new StringBuilder();

		builder.append(getRemarks() + " ");

		if (getDxTest() != null)
			builder.append("dxTest:" + getDxTest().getDisplayName() + " ");

		if (getEncounter() != null)
			builder
					.append("encounter:" + getEncounter().getDisplayName()
							+ " ");

		return builder.toString();
	}

	/*
	<param name="dxTestId" value="#{dxTestId}" />
	<param name="encounterId" value="#{encounterId}" />
	
	 */

}
