package com.oreon.cerebrum.employee;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;

//Impl 

/**
 * This file is generated by Witchcraftmda.
 * DO NOT MODIFY any changes will be overwritten with the next run of the code generator.
 *
 */

/**
 * 
 *
 */

@MappedSuperclass
public abstract class EmployeeBase extends com.oreon.cerebrum.patient.Person {
	private static final long serialVersionUID = -426154292L;

	@Transient
	@Field(index = Index.YES)
	@Analyzer(definition = "entityAnalyzer")
	protected String employeeNumber

	;

	@OneToOne(optional = false, fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "appUser_id", nullable = false, updatable = true)
	protected com.oreon.cerebrum.users.AppUser appUser = new com.oreon.cerebrum.users.AppUser();

	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	@JoinColumn(name = "facility_id", nullable = false, updatable = true)
	protected com.oreon.cerebrum.facility.Facility facility

	;

	@ManyToOne(optional = true, fetch = FetchType.LAZY)
	@JoinColumn(name = "department_id", nullable = true, updatable = true)
	protected Department department

	;

	public void setEmployeeNumber(String employeeNumber) {
		this.employeeNumber = employeeNumber;
	}

	public String getEmployeeNumber() {

		try {
			return getFacility().getId() + "-" + getId();
		} catch (Exception e) {

			return "";

		}

	}

	public void setAppUser(com.oreon.cerebrum.users.AppUser appUser) {
		this.appUser = appUser;
	}

	public com.oreon.cerebrum.users.AppUser getAppUser() {

		return appUser;

	}

	public void setFacility(com.oreon.cerebrum.facility.Facility facility) {
		this.facility = facility;
	}

	public com.oreon.cerebrum.facility.Facility getFacility() {

		return facility;

	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	public Department getDepartment() {

		return department;

	}

	@Transient
	public String getDisplayName() {
		try {
			return lastName != null ? lastName + ", " + firstName : "";
		} catch (Exception e) {
			return "Exception - " + e.getMessage();
		}
	}

	//Empty setter , needed for richfaces autocomplete to work 
	public void setDisplayName(String name) {
	}

	/** This method is used by hibernate full text search - override to add additional fields
	 * @see org.witchcraft.model.support.BaseEntity#retrieveSearchableFieldsArray()
	 */
	@Override
	public List<String> listSearchableFields() {
		List<String> listSearchableFields = new ArrayList<String>();
		listSearchableFields.addAll(super.listSearchableFields());

		listSearchableFields.add("employeeNumber");

		return listSearchableFields;
	}

	@Field(index = Index.YES, name = "searchData")
	@Analyzer(definition = "entityAnalyzer")
	public String getSearchData() {
		StringBuilder builder = new StringBuilder();

		builder.append(getEmployeeNumber() + " ");

		if (getAppUser() != null)
			builder.append("appUser:" + getAppUser().getDisplayName() + " ");

		if (getFacility() != null)
			builder.append("facility:" + getFacility().getDisplayName() + " ");

		if (getDepartment() != null)
			builder.append("department:" + getDepartment().getDisplayName()
					+ " ");

		return builder.toString();
	}

	/*
	<param name="appUserId" value="#{appUserId}" />
	<param name="facilityId" value="#{facilityId}" />
	<param name="departmentId" value="#{departmentId}" />
	
	 */

}
